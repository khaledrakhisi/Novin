//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4927
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace Novin {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("ds_cheques")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class ds_cheques : global::System.Data.DataSet {
        
        private tbl_accountsDataTable tabletbl_accounts;
        
        private tbl_banksDataTable tabletbl_banks;
        
        private tbl_chequesDataTable tabletbl_cheques;
        
        private tbl_personsDataTable tabletbl_persons;
        
        private tbl_chqStatesDataTable tabletbl_chqStates;
        
        private tbl_accDocsDataTable tabletbl_accDocs;
        
        private global::System.Data.DataRelation relationFK_tbl_accounts_tbl_banks;
        
        private global::System.Data.DataRelation relationFK_tbl_cheques_tbl_banks;
        
        private global::System.Data.DataRelation relationFK_tbl_cheques_tbl_persons;
        
        private global::System.Data.DataRelation relationFK_tbl_cheques_tbl_chqStates;
        
        private global::System.Data.DataRelation relationFK_tbl_cheques_tbl_accDocs;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ds_cheques() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected ds_cheques(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["tbl_accounts"] != null)) {
                    base.Tables.Add(new tbl_accountsDataTable(ds.Tables["tbl_accounts"]));
                }
                if ((ds.Tables["tbl_banks"] != null)) {
                    base.Tables.Add(new tbl_banksDataTable(ds.Tables["tbl_banks"]));
                }
                if ((ds.Tables["tbl_cheques"] != null)) {
                    base.Tables.Add(new tbl_chequesDataTable(ds.Tables["tbl_cheques"]));
                }
                if ((ds.Tables["tbl_persons"] != null)) {
                    base.Tables.Add(new tbl_personsDataTable(ds.Tables["tbl_persons"]));
                }
                if ((ds.Tables["tbl_chqStates"] != null)) {
                    base.Tables.Add(new tbl_chqStatesDataTable(ds.Tables["tbl_chqStates"]));
                }
                if ((ds.Tables["tbl_accDocs"] != null)) {
                    base.Tables.Add(new tbl_accDocsDataTable(ds.Tables["tbl_accDocs"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public tbl_accountsDataTable tbl_accounts {
            get {
                return this.tabletbl_accounts;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public tbl_banksDataTable tbl_banks {
            get {
                return this.tabletbl_banks;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public tbl_chequesDataTable tbl_cheques {
            get {
                return this.tabletbl_cheques;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public tbl_personsDataTable tbl_persons {
            get {
                return this.tabletbl_persons;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public tbl_chqStatesDataTable tbl_chqStates {
            get {
                return this.tabletbl_chqStates;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public tbl_accDocsDataTable tbl_accDocs {
            get {
                return this.tabletbl_accDocs;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            ds_cheques cln = ((ds_cheques)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["tbl_accounts"] != null)) {
                    base.Tables.Add(new tbl_accountsDataTable(ds.Tables["tbl_accounts"]));
                }
                if ((ds.Tables["tbl_banks"] != null)) {
                    base.Tables.Add(new tbl_banksDataTable(ds.Tables["tbl_banks"]));
                }
                if ((ds.Tables["tbl_cheques"] != null)) {
                    base.Tables.Add(new tbl_chequesDataTable(ds.Tables["tbl_cheques"]));
                }
                if ((ds.Tables["tbl_persons"] != null)) {
                    base.Tables.Add(new tbl_personsDataTable(ds.Tables["tbl_persons"]));
                }
                if ((ds.Tables["tbl_chqStates"] != null)) {
                    base.Tables.Add(new tbl_chqStatesDataTable(ds.Tables["tbl_chqStates"]));
                }
                if ((ds.Tables["tbl_accDocs"] != null)) {
                    base.Tables.Add(new tbl_accDocsDataTable(ds.Tables["tbl_accDocs"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tabletbl_accounts = ((tbl_accountsDataTable)(base.Tables["tbl_accounts"]));
            if ((initTable == true)) {
                if ((this.tabletbl_accounts != null)) {
                    this.tabletbl_accounts.InitVars();
                }
            }
            this.tabletbl_banks = ((tbl_banksDataTable)(base.Tables["tbl_banks"]));
            if ((initTable == true)) {
                if ((this.tabletbl_banks != null)) {
                    this.tabletbl_banks.InitVars();
                }
            }
            this.tabletbl_cheques = ((tbl_chequesDataTable)(base.Tables["tbl_cheques"]));
            if ((initTable == true)) {
                if ((this.tabletbl_cheques != null)) {
                    this.tabletbl_cheques.InitVars();
                }
            }
            this.tabletbl_persons = ((tbl_personsDataTable)(base.Tables["tbl_persons"]));
            if ((initTable == true)) {
                if ((this.tabletbl_persons != null)) {
                    this.tabletbl_persons.InitVars();
                }
            }
            this.tabletbl_chqStates = ((tbl_chqStatesDataTable)(base.Tables["tbl_chqStates"]));
            if ((initTable == true)) {
                if ((this.tabletbl_chqStates != null)) {
                    this.tabletbl_chqStates.InitVars();
                }
            }
            this.tabletbl_accDocs = ((tbl_accDocsDataTable)(base.Tables["tbl_accDocs"]));
            if ((initTable == true)) {
                if ((this.tabletbl_accDocs != null)) {
                    this.tabletbl_accDocs.InitVars();
                }
            }
            this.relationFK_tbl_accounts_tbl_banks = this.Relations["FK_tbl_accounts_tbl_banks"];
            this.relationFK_tbl_cheques_tbl_banks = this.Relations["FK_tbl_cheques_tbl_banks"];
            this.relationFK_tbl_cheques_tbl_persons = this.Relations["FK_tbl_cheques_tbl_persons"];
            this.relationFK_tbl_cheques_tbl_chqStates = this.Relations["FK_tbl_cheques_tbl_chqStates"];
            this.relationFK_tbl_cheques_tbl_accDocs = this.Relations["FK_tbl_cheques_tbl_accDocs"];
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "ds_cheques";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/ds_cheques1.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tabletbl_accounts = new tbl_accountsDataTable();
            base.Tables.Add(this.tabletbl_accounts);
            this.tabletbl_banks = new tbl_banksDataTable();
            base.Tables.Add(this.tabletbl_banks);
            this.tabletbl_cheques = new tbl_chequesDataTable();
            base.Tables.Add(this.tabletbl_cheques);
            this.tabletbl_persons = new tbl_personsDataTable();
            base.Tables.Add(this.tabletbl_persons);
            this.tabletbl_chqStates = new tbl_chqStatesDataTable();
            base.Tables.Add(this.tabletbl_chqStates);
            this.tabletbl_accDocs = new tbl_accDocsDataTable();
            base.Tables.Add(this.tabletbl_accDocs);
            this.relationFK_tbl_accounts_tbl_banks = new global::System.Data.DataRelation("FK_tbl_accounts_tbl_banks", new global::System.Data.DataColumn[] {
                        this.tabletbl_banks.bank_idColumn}, new global::System.Data.DataColumn[] {
                        this.tabletbl_accounts.bank_idColumn}, false);
            this.Relations.Add(this.relationFK_tbl_accounts_tbl_banks);
            this.relationFK_tbl_cheques_tbl_banks = new global::System.Data.DataRelation("FK_tbl_cheques_tbl_banks", new global::System.Data.DataColumn[] {
                        this.tabletbl_banks.bank_idColumn}, new global::System.Data.DataColumn[] {
                        this.tabletbl_cheques.bank_idColumn}, false);
            this.Relations.Add(this.relationFK_tbl_cheques_tbl_banks);
            this.relationFK_tbl_cheques_tbl_persons = new global::System.Data.DataRelation("FK_tbl_cheques_tbl_persons", new global::System.Data.DataColumn[] {
                        this.tabletbl_persons.person_idColumn}, new global::System.Data.DataColumn[] {
                        this.tabletbl_cheques.person_idColumn}, false);
            this.Relations.Add(this.relationFK_tbl_cheques_tbl_persons);
            this.relationFK_tbl_cheques_tbl_chqStates = new global::System.Data.DataRelation("FK_tbl_cheques_tbl_chqStates", new global::System.Data.DataColumn[] {
                        this.tabletbl_chqStates.chqState_idColumn}, new global::System.Data.DataColumn[] {
                        this.tabletbl_cheques.chqState_idColumn}, false);
            this.Relations.Add(this.relationFK_tbl_cheques_tbl_chqStates);
            this.relationFK_tbl_cheques_tbl_accDocs = new global::System.Data.DataRelation("FK_tbl_cheques_tbl_accDocs", new global::System.Data.DataColumn[] {
                        this.tabletbl_accDocs.accDoc_idColumn}, new global::System.Data.DataColumn[] {
                        this.tabletbl_cheques.accDoc_idColumn}, false);
            this.Relations.Add(this.relationFK_tbl_cheques_tbl_accDocs);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializetbl_accounts() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializetbl_banks() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializetbl_cheques() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializetbl_persons() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializetbl_chqStates() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializetbl_accDocs() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            ds_cheques ds = new ds_cheques();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void tbl_accountsRowChangeEventHandler(object sender, tbl_accountsRowChangeEvent e);
        
        public delegate void tbl_banksRowChangeEventHandler(object sender, tbl_banksRowChangeEvent e);
        
        public delegate void tbl_chequesRowChangeEventHandler(object sender, tbl_chequesRowChangeEvent e);
        
        public delegate void tbl_personsRowChangeEventHandler(object sender, tbl_personsRowChangeEvent e);
        
        public delegate void tbl_chqStatesRowChangeEventHandler(object sender, tbl_chqStatesRowChangeEvent e);
        
        public delegate void tbl_accDocsRowChangeEventHandler(object sender, tbl_accDocsRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class tbl_accountsDataTable : global::System.Data.TypedTableBase<tbl_accountsRow> {
            
            private global::System.Data.DataColumn columnaccount_id;
            
            private global::System.Data.DataColumn columnbank_id;
            
            private global::System.Data.DataColumn columnaccount_number;
            
            private global::System.Data.DataColumn columnaccount_chapterName;
            
            private global::System.Data.DataColumn columnaccount_chapterNo;
            
            private global::System.Data.DataColumn columnaccountType_id;
            
            private global::System.Data.DataColumn columnaccount_totalPrice;
            
            private global::System.Data.DataColumn columnaccount_remain;
            
            private global::System.Data.DataColumn columnmoeen_id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tbl_accountsDataTable() {
                this.TableName = "tbl_accounts";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal tbl_accountsDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected tbl_accountsDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn account_idColumn {
                get {
                    return this.columnaccount_id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn bank_idColumn {
                get {
                    return this.columnbank_id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn account_numberColumn {
                get {
                    return this.columnaccount_number;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn account_chapterNameColumn {
                get {
                    return this.columnaccount_chapterName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn account_chapterNoColumn {
                get {
                    return this.columnaccount_chapterNo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn accountType_idColumn {
                get {
                    return this.columnaccountType_id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn account_totalPriceColumn {
                get {
                    return this.columnaccount_totalPrice;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn account_remainColumn {
                get {
                    return this.columnaccount_remain;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn moeen_idColumn {
                get {
                    return this.columnmoeen_id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tbl_accountsRow this[int index] {
                get {
                    return ((tbl_accountsRow)(this.Rows[index]));
                }
            }
            
            public event tbl_accountsRowChangeEventHandler tbl_accountsRowChanging;
            
            public event tbl_accountsRowChangeEventHandler tbl_accountsRowChanged;
            
            public event tbl_accountsRowChangeEventHandler tbl_accountsRowDeleting;
            
            public event tbl_accountsRowChangeEventHandler tbl_accountsRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Addtbl_accountsRow(tbl_accountsRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tbl_accountsRow Addtbl_accountsRow(tbl_banksRow parenttbl_banksRowByFK_tbl_accounts_tbl_banks, string account_number, string account_chapterName, string account_chapterNo, int accountType_id, long account_totalPrice, long account_remain, string moeen_id) {
                tbl_accountsRow rowtbl_accountsRow = ((tbl_accountsRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        null,
                        account_number,
                        account_chapterName,
                        account_chapterNo,
                        accountType_id,
                        account_totalPrice,
                        account_remain,
                        moeen_id};
                if ((parenttbl_banksRowByFK_tbl_accounts_tbl_banks != null)) {
                    columnValuesArray[1] = parenttbl_banksRowByFK_tbl_accounts_tbl_banks[0];
                }
                rowtbl_accountsRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowtbl_accountsRow);
                return rowtbl_accountsRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tbl_accountsRow FindBybank_idaccount_number(int bank_id, string account_number) {
                return ((tbl_accountsRow)(this.Rows.Find(new object[] {
                            bank_id,
                            account_number})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                tbl_accountsDataTable cln = ((tbl_accountsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new tbl_accountsDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnaccount_id = base.Columns["account_id"];
                this.columnbank_id = base.Columns["bank_id"];
                this.columnaccount_number = base.Columns["account_number"];
                this.columnaccount_chapterName = base.Columns["account_chapterName"];
                this.columnaccount_chapterNo = base.Columns["account_chapterNo"];
                this.columnaccountType_id = base.Columns["accountType_id"];
                this.columnaccount_totalPrice = base.Columns["account_totalPrice"];
                this.columnaccount_remain = base.Columns["account_remain"];
                this.columnmoeen_id = base.Columns["moeen_id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnaccount_id = new global::System.Data.DataColumn("account_id", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnaccount_id);
                this.columnbank_id = new global::System.Data.DataColumn("bank_id", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnbank_id);
                this.columnaccount_number = new global::System.Data.DataColumn("account_number", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnaccount_number);
                this.columnaccount_chapterName = new global::System.Data.DataColumn("account_chapterName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnaccount_chapterName);
                this.columnaccount_chapterNo = new global::System.Data.DataColumn("account_chapterNo", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnaccount_chapterNo);
                this.columnaccountType_id = new global::System.Data.DataColumn("accountType_id", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnaccountType_id);
                this.columnaccount_totalPrice = new global::System.Data.DataColumn("account_totalPrice", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnaccount_totalPrice);
                this.columnaccount_remain = new global::System.Data.DataColumn("account_remain", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnaccount_remain);
                this.columnmoeen_id = new global::System.Data.DataColumn("moeen_id", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnmoeen_id);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnbank_id,
                                this.columnaccount_number}, true));
                this.columnaccount_id.AutoIncrement = true;
                this.columnaccount_id.AutoIncrementSeed = -1;
                this.columnaccount_id.AutoIncrementStep = -1;
                this.columnaccount_id.AllowDBNull = false;
                this.columnaccount_id.ReadOnly = true;
                this.columnbank_id.AllowDBNull = false;
                this.columnaccount_number.AllowDBNull = false;
                this.columnaccount_number.MaxLength = 50;
                this.columnaccount_chapterName.MaxLength = 50;
                this.columnaccount_chapterNo.MaxLength = 50;
                this.columnaccountType_id.AllowDBNull = false;
                this.columnaccount_totalPrice.AllowDBNull = false;
                this.columnaccount_remain.AllowDBNull = false;
                this.columnmoeen_id.AllowDBNull = false;
                this.columnmoeen_id.MaxLength = 10;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tbl_accountsRow Newtbl_accountsRow() {
                return ((tbl_accountsRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new tbl_accountsRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(tbl_accountsRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.tbl_accountsRowChanged != null)) {
                    this.tbl_accountsRowChanged(this, new tbl_accountsRowChangeEvent(((tbl_accountsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.tbl_accountsRowChanging != null)) {
                    this.tbl_accountsRowChanging(this, new tbl_accountsRowChangeEvent(((tbl_accountsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.tbl_accountsRowDeleted != null)) {
                    this.tbl_accountsRowDeleted(this, new tbl_accountsRowChangeEvent(((tbl_accountsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.tbl_accountsRowDeleting != null)) {
                    this.tbl_accountsRowDeleting(this, new tbl_accountsRowChangeEvent(((tbl_accountsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Removetbl_accountsRow(tbl_accountsRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ds_cheques ds = new ds_cheques();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "tbl_accountsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class tbl_banksDataTable : global::System.Data.TypedTableBase<tbl_banksRow> {
            
            private global::System.Data.DataColumn columnbank_id;
            
            private global::System.Data.DataColumn columnbank_name;
            
            private global::System.Data.DataColumn columnbank_comment;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tbl_banksDataTable() {
                this.TableName = "tbl_banks";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal tbl_banksDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected tbl_banksDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn bank_idColumn {
                get {
                    return this.columnbank_id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn bank_nameColumn {
                get {
                    return this.columnbank_name;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn bank_commentColumn {
                get {
                    return this.columnbank_comment;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tbl_banksRow this[int index] {
                get {
                    return ((tbl_banksRow)(this.Rows[index]));
                }
            }
            
            public event tbl_banksRowChangeEventHandler tbl_banksRowChanging;
            
            public event tbl_banksRowChangeEventHandler tbl_banksRowChanged;
            
            public event tbl_banksRowChangeEventHandler tbl_banksRowDeleting;
            
            public event tbl_banksRowChangeEventHandler tbl_banksRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Addtbl_banksRow(tbl_banksRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tbl_banksRow Addtbl_banksRow(string bank_name, string bank_comment) {
                tbl_banksRow rowtbl_banksRow = ((tbl_banksRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        bank_name,
                        bank_comment};
                rowtbl_banksRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowtbl_banksRow);
                return rowtbl_banksRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tbl_banksRow FindBybank_id(int bank_id) {
                return ((tbl_banksRow)(this.Rows.Find(new object[] {
                            bank_id})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                tbl_banksDataTable cln = ((tbl_banksDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new tbl_banksDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnbank_id = base.Columns["bank_id"];
                this.columnbank_name = base.Columns["bank_name"];
                this.columnbank_comment = base.Columns["bank_comment"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnbank_id = new global::System.Data.DataColumn("bank_id", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnbank_id);
                this.columnbank_name = new global::System.Data.DataColumn("bank_name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnbank_name);
                this.columnbank_comment = new global::System.Data.DataColumn("bank_comment", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnbank_comment);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnbank_id}, true));
                this.columnbank_id.AutoIncrement = true;
                this.columnbank_id.AutoIncrementSeed = -1;
                this.columnbank_id.AutoIncrementStep = -1;
                this.columnbank_id.AllowDBNull = false;
                this.columnbank_id.ReadOnly = true;
                this.columnbank_id.Unique = true;
                this.columnbank_name.AllowDBNull = false;
                this.columnbank_name.MaxLength = 50;
                this.columnbank_comment.MaxLength = 100;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tbl_banksRow Newtbl_banksRow() {
                return ((tbl_banksRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new tbl_banksRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(tbl_banksRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.tbl_banksRowChanged != null)) {
                    this.tbl_banksRowChanged(this, new tbl_banksRowChangeEvent(((tbl_banksRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.tbl_banksRowChanging != null)) {
                    this.tbl_banksRowChanging(this, new tbl_banksRowChangeEvent(((tbl_banksRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.tbl_banksRowDeleted != null)) {
                    this.tbl_banksRowDeleted(this, new tbl_banksRowChangeEvent(((tbl_banksRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.tbl_banksRowDeleting != null)) {
                    this.tbl_banksRowDeleting(this, new tbl_banksRowChangeEvent(((tbl_banksRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Removetbl_banksRow(tbl_banksRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ds_cheques ds = new ds_cheques();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "tbl_banksDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class tbl_chequesDataTable : global::System.Data.TypedTableBase<tbl_chequesRow> {
            
            private global::System.Data.DataColumn columnchq_id;
            
            private global::System.Data.DataColumn columnperson_id;
            
            private global::System.Data.DataColumn columnbank_id;
            
            private global::System.Data.DataColumn columnaccount_id;
            
            private global::System.Data.DataColumn columnchqState_id;
            
            private global::System.Data.DataColumn columnchq_hisAccount;
            
            private global::System.Data.DataColumn columnchq_number;
            
            private global::System.Data.DataColumn columnchq_issDate;
            
            private global::System.Data.DataColumn columnchq_usaDate;
            
            private global::System.Data.DataColumn columnchq_isItMine;
            
            private global::System.Data.DataColumn columnchq_price;
            
            private global::System.Data.DataColumn columnchq_comment;
            
            private global::System.Data.DataColumn columnaccDoc_id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tbl_chequesDataTable() {
                this.TableName = "tbl_cheques";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal tbl_chequesDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected tbl_chequesDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn chq_idColumn {
                get {
                    return this.columnchq_id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn person_idColumn {
                get {
                    return this.columnperson_id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn bank_idColumn {
                get {
                    return this.columnbank_id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn account_idColumn {
                get {
                    return this.columnaccount_id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn chqState_idColumn {
                get {
                    return this.columnchqState_id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn chq_hisAccountColumn {
                get {
                    return this.columnchq_hisAccount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn chq_numberColumn {
                get {
                    return this.columnchq_number;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn chq_issDateColumn {
                get {
                    return this.columnchq_issDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn chq_usaDateColumn {
                get {
                    return this.columnchq_usaDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn chq_isItMineColumn {
                get {
                    return this.columnchq_isItMine;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn chq_priceColumn {
                get {
                    return this.columnchq_price;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn chq_commentColumn {
                get {
                    return this.columnchq_comment;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn accDoc_idColumn {
                get {
                    return this.columnaccDoc_id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tbl_chequesRow this[int index] {
                get {
                    return ((tbl_chequesRow)(this.Rows[index]));
                }
            }
            
            public event tbl_chequesRowChangeEventHandler tbl_chequesRowChanging;
            
            public event tbl_chequesRowChangeEventHandler tbl_chequesRowChanged;
            
            public event tbl_chequesRowChangeEventHandler tbl_chequesRowDeleting;
            
            public event tbl_chequesRowChangeEventHandler tbl_chequesRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Addtbl_chequesRow(tbl_chequesRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tbl_chequesRow Addtbl_chequesRow(tbl_personsRow parenttbl_personsRowByFK_tbl_cheques_tbl_persons, tbl_banksRow parenttbl_banksRowByFK_tbl_cheques_tbl_banks, int account_id, tbl_chqStatesRow parenttbl_chqStatesRowByFK_tbl_cheques_tbl_chqStates, string chq_hisAccount, string chq_number, string chq_issDate, string chq_usaDate, bool chq_isItMine, long chq_price, string chq_comment, tbl_accDocsRow parenttbl_accDocsRowByFK_tbl_cheques_tbl_accDocs) {
                tbl_chequesRow rowtbl_chequesRow = ((tbl_chequesRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        null,
                        null,
                        account_id,
                        null,
                        chq_hisAccount,
                        chq_number,
                        chq_issDate,
                        chq_usaDate,
                        chq_isItMine,
                        chq_price,
                        chq_comment,
                        null};
                if ((parenttbl_personsRowByFK_tbl_cheques_tbl_persons != null)) {
                    columnValuesArray[1] = parenttbl_personsRowByFK_tbl_cheques_tbl_persons[0];
                }
                if ((parenttbl_banksRowByFK_tbl_cheques_tbl_banks != null)) {
                    columnValuesArray[2] = parenttbl_banksRowByFK_tbl_cheques_tbl_banks[0];
                }
                if ((parenttbl_chqStatesRowByFK_tbl_cheques_tbl_chqStates != null)) {
                    columnValuesArray[4] = parenttbl_chqStatesRowByFK_tbl_cheques_tbl_chqStates[0];
                }
                if ((parenttbl_accDocsRowByFK_tbl_cheques_tbl_accDocs != null)) {
                    columnValuesArray[12] = parenttbl_accDocsRowByFK_tbl_cheques_tbl_accDocs[0];
                }
                rowtbl_chequesRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowtbl_chequesRow);
                return rowtbl_chequesRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tbl_chequesRow FindBychq_id(int chq_id) {
                return ((tbl_chequesRow)(this.Rows.Find(new object[] {
                            chq_id})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                tbl_chequesDataTable cln = ((tbl_chequesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new tbl_chequesDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnchq_id = base.Columns["chq_id"];
                this.columnperson_id = base.Columns["person_id"];
                this.columnbank_id = base.Columns["bank_id"];
                this.columnaccount_id = base.Columns["account_id"];
                this.columnchqState_id = base.Columns["chqState_id"];
                this.columnchq_hisAccount = base.Columns["chq_hisAccount"];
                this.columnchq_number = base.Columns["chq_number"];
                this.columnchq_issDate = base.Columns["chq_issDate"];
                this.columnchq_usaDate = base.Columns["chq_usaDate"];
                this.columnchq_isItMine = base.Columns["chq_isItMine"];
                this.columnchq_price = base.Columns["chq_price"];
                this.columnchq_comment = base.Columns["chq_comment"];
                this.columnaccDoc_id = base.Columns["accDoc_id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnchq_id = new global::System.Data.DataColumn("chq_id", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnchq_id);
                this.columnperson_id = new global::System.Data.DataColumn("person_id", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnperson_id);
                this.columnbank_id = new global::System.Data.DataColumn("bank_id", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnbank_id);
                this.columnaccount_id = new global::System.Data.DataColumn("account_id", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnaccount_id);
                this.columnchqState_id = new global::System.Data.DataColumn("chqState_id", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnchqState_id);
                this.columnchq_hisAccount = new global::System.Data.DataColumn("chq_hisAccount", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnchq_hisAccount);
                this.columnchq_number = new global::System.Data.DataColumn("chq_number", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnchq_number);
                this.columnchq_issDate = new global::System.Data.DataColumn("chq_issDate", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnchq_issDate);
                this.columnchq_usaDate = new global::System.Data.DataColumn("chq_usaDate", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnchq_usaDate);
                this.columnchq_isItMine = new global::System.Data.DataColumn("chq_isItMine", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnchq_isItMine);
                this.columnchq_price = new global::System.Data.DataColumn("chq_price", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnchq_price);
                this.columnchq_comment = new global::System.Data.DataColumn("chq_comment", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnchq_comment);
                this.columnaccDoc_id = new global::System.Data.DataColumn("accDoc_id", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnaccDoc_id);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnchq_id}, true));
                this.columnchq_id.AutoIncrement = true;
                this.columnchq_id.AutoIncrementSeed = -1;
                this.columnchq_id.AutoIncrementStep = -1;
                this.columnchq_id.AllowDBNull = false;
                this.columnchq_id.ReadOnly = true;
                this.columnchq_id.Unique = true;
                this.columnperson_id.AllowDBNull = false;
                this.columnbank_id.AllowDBNull = false;
                this.columnchqState_id.AllowDBNull = false;
                this.columnchq_hisAccount.MaxLength = 50;
                this.columnchq_number.AllowDBNull = false;
                this.columnchq_number.MaxLength = 50;
                this.columnchq_issDate.AllowDBNull = false;
                this.columnchq_issDate.MaxLength = 10;
                this.columnchq_usaDate.AllowDBNull = false;
                this.columnchq_usaDate.MaxLength = 50;
                this.columnchq_isItMine.AllowDBNull = false;
                this.columnchq_price.AllowDBNull = false;
                this.columnchq_comment.MaxLength = 150;
                this.columnaccDoc_id.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tbl_chequesRow Newtbl_chequesRow() {
                return ((tbl_chequesRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new tbl_chequesRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(tbl_chequesRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.tbl_chequesRowChanged != null)) {
                    this.tbl_chequesRowChanged(this, new tbl_chequesRowChangeEvent(((tbl_chequesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.tbl_chequesRowChanging != null)) {
                    this.tbl_chequesRowChanging(this, new tbl_chequesRowChangeEvent(((tbl_chequesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.tbl_chequesRowDeleted != null)) {
                    this.tbl_chequesRowDeleted(this, new tbl_chequesRowChangeEvent(((tbl_chequesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.tbl_chequesRowDeleting != null)) {
                    this.tbl_chequesRowDeleting(this, new tbl_chequesRowChangeEvent(((tbl_chequesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Removetbl_chequesRow(tbl_chequesRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ds_cheques ds = new ds_cheques();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "tbl_chequesDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class tbl_personsDataTable : global::System.Data.TypedTableBase<tbl_personsRow> {
            
            private global::System.Data.DataColumn columnperson_id;
            
            private global::System.Data.DataColumn columnzone_id;
            
            private global::System.Data.DataColumn columnperson_familyAndName;
            
            private global::System.Data.DataColumn columnperson_aliasName;
            
            private global::System.Data.DataColumn columnperson_nationalNum;
            
            private global::System.Data.DataColumn columnperson_ccode;
            
            private global::System.Data.DataColumn columnperson_phone;
            
            private global::System.Data.DataColumn columnperson_beforeType;
            
            private global::System.Data.DataColumn columnperson_remainMoney;
            
            private global::System.Data.DataColumn columnperson_isCustomer;
            
            private global::System.Data.DataColumn columnperson_isSeller;
            
            private global::System.Data.DataColumn columnperson_isInter;
            
            private global::System.Data.DataColumn columnperson_discountPercent;
            
            private global::System.Data.DataColumn columnperson_address1;
            
            private global::System.Data.DataColumn columnperson_address2;
            
            private global::System.Data.DataColumn columnperson_comment;
            
            private global::System.Data.DataColumn columnmoeen_id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tbl_personsDataTable() {
                this.TableName = "tbl_persons";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal tbl_personsDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected tbl_personsDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn person_idColumn {
                get {
                    return this.columnperson_id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn zone_idColumn {
                get {
                    return this.columnzone_id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn person_familyAndNameColumn {
                get {
                    return this.columnperson_familyAndName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn person_aliasNameColumn {
                get {
                    return this.columnperson_aliasName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn person_nationalNumColumn {
                get {
                    return this.columnperson_nationalNum;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn person_ccodeColumn {
                get {
                    return this.columnperson_ccode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn person_phoneColumn {
                get {
                    return this.columnperson_phone;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn person_beforeTypeColumn {
                get {
                    return this.columnperson_beforeType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn person_remainMoneyColumn {
                get {
                    return this.columnperson_remainMoney;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn person_isCustomerColumn {
                get {
                    return this.columnperson_isCustomer;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn person_isSellerColumn {
                get {
                    return this.columnperson_isSeller;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn person_isInterColumn {
                get {
                    return this.columnperson_isInter;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn person_discountPercentColumn {
                get {
                    return this.columnperson_discountPercent;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn person_address1Column {
                get {
                    return this.columnperson_address1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn person_address2Column {
                get {
                    return this.columnperson_address2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn person_commentColumn {
                get {
                    return this.columnperson_comment;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn moeen_idColumn {
                get {
                    return this.columnmoeen_id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tbl_personsRow this[int index] {
                get {
                    return ((tbl_personsRow)(this.Rows[index]));
                }
            }
            
            public event tbl_personsRowChangeEventHandler tbl_personsRowChanging;
            
            public event tbl_personsRowChangeEventHandler tbl_personsRowChanged;
            
            public event tbl_personsRowChangeEventHandler tbl_personsRowDeleting;
            
            public event tbl_personsRowChangeEventHandler tbl_personsRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Addtbl_personsRow(tbl_personsRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tbl_personsRow Addtbl_personsRow(
                        int person_id, 
                        int zone_id, 
                        string person_familyAndName, 
                        string person_aliasName, 
                        string person_nationalNum, 
                        string person_ccode, 
                        string person_phone, 
                        short person_beforeType, 
                        long person_remainMoney, 
                        bool person_isCustomer, 
                        bool person_isSeller, 
                        bool person_isInter, 
                        short person_discountPercent, 
                        string person_address1, 
                        string person_address2, 
                        string person_comment, 
                        string moeen_id) {
                tbl_personsRow rowtbl_personsRow = ((tbl_personsRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        person_id,
                        zone_id,
                        person_familyAndName,
                        person_aliasName,
                        person_nationalNum,
                        person_ccode,
                        person_phone,
                        person_beforeType,
                        person_remainMoney,
                        person_isCustomer,
                        person_isSeller,
                        person_isInter,
                        person_discountPercent,
                        person_address1,
                        person_address2,
                        person_comment,
                        moeen_id};
                rowtbl_personsRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowtbl_personsRow);
                return rowtbl_personsRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tbl_personsRow FindByperson_id(int person_id) {
                return ((tbl_personsRow)(this.Rows.Find(new object[] {
                            person_id})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                tbl_personsDataTable cln = ((tbl_personsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new tbl_personsDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnperson_id = base.Columns["person_id"];
                this.columnzone_id = base.Columns["zone_id"];
                this.columnperson_familyAndName = base.Columns["person_familyAndName"];
                this.columnperson_aliasName = base.Columns["person_aliasName"];
                this.columnperson_nationalNum = base.Columns["person_nationalNum"];
                this.columnperson_ccode = base.Columns["person_ccode"];
                this.columnperson_phone = base.Columns["person_phone"];
                this.columnperson_beforeType = base.Columns["person_beforeType"];
                this.columnperson_remainMoney = base.Columns["person_remainMoney"];
                this.columnperson_isCustomer = base.Columns["person_isCustomer"];
                this.columnperson_isSeller = base.Columns["person_isSeller"];
                this.columnperson_isInter = base.Columns["person_isInter"];
                this.columnperson_discountPercent = base.Columns["person_discountPercent"];
                this.columnperson_address1 = base.Columns["person_address1"];
                this.columnperson_address2 = base.Columns["person_address2"];
                this.columnperson_comment = base.Columns["person_comment"];
                this.columnmoeen_id = base.Columns["moeen_id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnperson_id = new global::System.Data.DataColumn("person_id", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnperson_id);
                this.columnzone_id = new global::System.Data.DataColumn("zone_id", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnzone_id);
                this.columnperson_familyAndName = new global::System.Data.DataColumn("person_familyAndName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnperson_familyAndName);
                this.columnperson_aliasName = new global::System.Data.DataColumn("person_aliasName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnperson_aliasName);
                this.columnperson_nationalNum = new global::System.Data.DataColumn("person_nationalNum", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnperson_nationalNum);
                this.columnperson_ccode = new global::System.Data.DataColumn("person_ccode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnperson_ccode);
                this.columnperson_phone = new global::System.Data.DataColumn("person_phone", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnperson_phone);
                this.columnperson_beforeType = new global::System.Data.DataColumn("person_beforeType", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnperson_beforeType);
                this.columnperson_remainMoney = new global::System.Data.DataColumn("person_remainMoney", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnperson_remainMoney);
                this.columnperson_isCustomer = new global::System.Data.DataColumn("person_isCustomer", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnperson_isCustomer);
                this.columnperson_isSeller = new global::System.Data.DataColumn("person_isSeller", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnperson_isSeller);
                this.columnperson_isInter = new global::System.Data.DataColumn("person_isInter", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnperson_isInter);
                this.columnperson_discountPercent = new global::System.Data.DataColumn("person_discountPercent", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnperson_discountPercent);
                this.columnperson_address1 = new global::System.Data.DataColumn("person_address1", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnperson_address1);
                this.columnperson_address2 = new global::System.Data.DataColumn("person_address2", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnperson_address2);
                this.columnperson_comment = new global::System.Data.DataColumn("person_comment", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnperson_comment);
                this.columnmoeen_id = new global::System.Data.DataColumn("moeen_id", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnmoeen_id);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnperson_id}, true));
                this.columnperson_id.AllowDBNull = false;
                this.columnperson_id.Unique = true;
                this.columnzone_id.AllowDBNull = false;
                this.columnperson_familyAndName.AllowDBNull = false;
                this.columnperson_familyAndName.MaxLength = 100;
                this.columnperson_aliasName.MaxLength = 50;
                this.columnperson_nationalNum.MaxLength = 50;
                this.columnperson_ccode.MaxLength = 10;
                this.columnperson_phone.MaxLength = 66;
                this.columnperson_beforeType.AllowDBNull = false;
                this.columnperson_remainMoney.AllowDBNull = false;
                this.columnperson_isCustomer.AllowDBNull = false;
                this.columnperson_isSeller.AllowDBNull = false;
                this.columnperson_isInter.AllowDBNull = false;
                this.columnperson_discountPercent.AllowDBNull = false;
                this.columnperson_address1.MaxLength = 200;
                this.columnperson_address2.MaxLength = 200;
                this.columnperson_comment.MaxLength = 100;
                this.columnmoeen_id.AllowDBNull = false;
                this.columnmoeen_id.MaxLength = 50;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tbl_personsRow Newtbl_personsRow() {
                return ((tbl_personsRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new tbl_personsRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(tbl_personsRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.tbl_personsRowChanged != null)) {
                    this.tbl_personsRowChanged(this, new tbl_personsRowChangeEvent(((tbl_personsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.tbl_personsRowChanging != null)) {
                    this.tbl_personsRowChanging(this, new tbl_personsRowChangeEvent(((tbl_personsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.tbl_personsRowDeleted != null)) {
                    this.tbl_personsRowDeleted(this, new tbl_personsRowChangeEvent(((tbl_personsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.tbl_personsRowDeleting != null)) {
                    this.tbl_personsRowDeleting(this, new tbl_personsRowChangeEvent(((tbl_personsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Removetbl_personsRow(tbl_personsRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ds_cheques ds = new ds_cheques();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "tbl_personsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class tbl_chqStatesDataTable : global::System.Data.TypedTableBase<tbl_chqStatesRow> {
            
            private global::System.Data.DataColumn columnchqState_id;
            
            private global::System.Data.DataColumn columnchqState_title;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tbl_chqStatesDataTable() {
                this.TableName = "tbl_chqStates";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal tbl_chqStatesDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected tbl_chqStatesDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn chqState_idColumn {
                get {
                    return this.columnchqState_id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn chqState_titleColumn {
                get {
                    return this.columnchqState_title;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tbl_chqStatesRow this[int index] {
                get {
                    return ((tbl_chqStatesRow)(this.Rows[index]));
                }
            }
            
            public event tbl_chqStatesRowChangeEventHandler tbl_chqStatesRowChanging;
            
            public event tbl_chqStatesRowChangeEventHandler tbl_chqStatesRowChanged;
            
            public event tbl_chqStatesRowChangeEventHandler tbl_chqStatesRowDeleting;
            
            public event tbl_chqStatesRowChangeEventHandler tbl_chqStatesRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Addtbl_chqStatesRow(tbl_chqStatesRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tbl_chqStatesRow Addtbl_chqStatesRow(string chqState_title) {
                tbl_chqStatesRow rowtbl_chqStatesRow = ((tbl_chqStatesRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        chqState_title};
                rowtbl_chqStatesRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowtbl_chqStatesRow);
                return rowtbl_chqStatesRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tbl_chqStatesRow FindBychqState_id(int chqState_id) {
                return ((tbl_chqStatesRow)(this.Rows.Find(new object[] {
                            chqState_id})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                tbl_chqStatesDataTable cln = ((tbl_chqStatesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new tbl_chqStatesDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnchqState_id = base.Columns["chqState_id"];
                this.columnchqState_title = base.Columns["chqState_title"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnchqState_id = new global::System.Data.DataColumn("chqState_id", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnchqState_id);
                this.columnchqState_title = new global::System.Data.DataColumn("chqState_title", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnchqState_title);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnchqState_id}, true));
                this.columnchqState_id.AutoIncrement = true;
                this.columnchqState_id.AutoIncrementSeed = -1;
                this.columnchqState_id.AutoIncrementStep = -1;
                this.columnchqState_id.AllowDBNull = false;
                this.columnchqState_id.ReadOnly = true;
                this.columnchqState_id.Unique = true;
                this.columnchqState_title.AllowDBNull = false;
                this.columnchqState_title.MaxLength = 50;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tbl_chqStatesRow Newtbl_chqStatesRow() {
                return ((tbl_chqStatesRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new tbl_chqStatesRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(tbl_chqStatesRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.tbl_chqStatesRowChanged != null)) {
                    this.tbl_chqStatesRowChanged(this, new tbl_chqStatesRowChangeEvent(((tbl_chqStatesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.tbl_chqStatesRowChanging != null)) {
                    this.tbl_chqStatesRowChanging(this, new tbl_chqStatesRowChangeEvent(((tbl_chqStatesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.tbl_chqStatesRowDeleted != null)) {
                    this.tbl_chqStatesRowDeleted(this, new tbl_chqStatesRowChangeEvent(((tbl_chqStatesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.tbl_chqStatesRowDeleting != null)) {
                    this.tbl_chqStatesRowDeleting(this, new tbl_chqStatesRowChangeEvent(((tbl_chqStatesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Removetbl_chqStatesRow(tbl_chqStatesRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ds_cheques ds = new ds_cheques();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "tbl_chqStatesDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class tbl_accDocsDataTable : global::System.Data.TypedTableBase<tbl_accDocsRow> {
            
            private global::System.Data.DataColumn columnaccDoc_id;
            
            private global::System.Data.DataColumn columnaccDoc_price;
            
            private global::System.Data.DataColumn columnaccDoc_date;
            
            private global::System.Data.DataColumn columnaccDoc_comment;
            
            private global::System.Data.DataColumn columnaccDoc_isItPerm;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tbl_accDocsDataTable() {
                this.TableName = "tbl_accDocs";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal tbl_accDocsDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected tbl_accDocsDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn accDoc_idColumn {
                get {
                    return this.columnaccDoc_id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn accDoc_priceColumn {
                get {
                    return this.columnaccDoc_price;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn accDoc_dateColumn {
                get {
                    return this.columnaccDoc_date;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn accDoc_commentColumn {
                get {
                    return this.columnaccDoc_comment;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn accDoc_isItPermColumn {
                get {
                    return this.columnaccDoc_isItPerm;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tbl_accDocsRow this[int index] {
                get {
                    return ((tbl_accDocsRow)(this.Rows[index]));
                }
            }
            
            public event tbl_accDocsRowChangeEventHandler tbl_accDocsRowChanging;
            
            public event tbl_accDocsRowChangeEventHandler tbl_accDocsRowChanged;
            
            public event tbl_accDocsRowChangeEventHandler tbl_accDocsRowDeleting;
            
            public event tbl_accDocsRowChangeEventHandler tbl_accDocsRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Addtbl_accDocsRow(tbl_accDocsRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tbl_accDocsRow Addtbl_accDocsRow(int accDoc_id, long accDoc_price, string accDoc_date, string accDoc_comment, bool accDoc_isItPerm) {
                tbl_accDocsRow rowtbl_accDocsRow = ((tbl_accDocsRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        accDoc_id,
                        accDoc_price,
                        accDoc_date,
                        accDoc_comment,
                        accDoc_isItPerm};
                rowtbl_accDocsRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowtbl_accDocsRow);
                return rowtbl_accDocsRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tbl_accDocsRow FindByaccDoc_id(int accDoc_id) {
                return ((tbl_accDocsRow)(this.Rows.Find(new object[] {
                            accDoc_id})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                tbl_accDocsDataTable cln = ((tbl_accDocsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new tbl_accDocsDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnaccDoc_id = base.Columns["accDoc_id"];
                this.columnaccDoc_price = base.Columns["accDoc_price"];
                this.columnaccDoc_date = base.Columns["accDoc_date"];
                this.columnaccDoc_comment = base.Columns["accDoc_comment"];
                this.columnaccDoc_isItPerm = base.Columns["accDoc_isItPerm"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnaccDoc_id = new global::System.Data.DataColumn("accDoc_id", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnaccDoc_id);
                this.columnaccDoc_price = new global::System.Data.DataColumn("accDoc_price", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnaccDoc_price);
                this.columnaccDoc_date = new global::System.Data.DataColumn("accDoc_date", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnaccDoc_date);
                this.columnaccDoc_comment = new global::System.Data.DataColumn("accDoc_comment", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnaccDoc_comment);
                this.columnaccDoc_isItPerm = new global::System.Data.DataColumn("accDoc_isItPerm", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnaccDoc_isItPerm);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnaccDoc_id}, true));
                this.columnaccDoc_id.AllowDBNull = false;
                this.columnaccDoc_id.Unique = true;
                this.columnaccDoc_price.AllowDBNull = false;
                this.columnaccDoc_date.AllowDBNull = false;
                this.columnaccDoc_date.MaxLength = 50;
                this.columnaccDoc_comment.MaxLength = 150;
                this.columnaccDoc_isItPerm.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tbl_accDocsRow Newtbl_accDocsRow() {
                return ((tbl_accDocsRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new tbl_accDocsRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(tbl_accDocsRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.tbl_accDocsRowChanged != null)) {
                    this.tbl_accDocsRowChanged(this, new tbl_accDocsRowChangeEvent(((tbl_accDocsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.tbl_accDocsRowChanging != null)) {
                    this.tbl_accDocsRowChanging(this, new tbl_accDocsRowChangeEvent(((tbl_accDocsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.tbl_accDocsRowDeleted != null)) {
                    this.tbl_accDocsRowDeleted(this, new tbl_accDocsRowChangeEvent(((tbl_accDocsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.tbl_accDocsRowDeleting != null)) {
                    this.tbl_accDocsRowDeleting(this, new tbl_accDocsRowChangeEvent(((tbl_accDocsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Removetbl_accDocsRow(tbl_accDocsRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ds_cheques ds = new ds_cheques();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "tbl_accDocsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class tbl_accountsRow : global::System.Data.DataRow {
            
            private tbl_accountsDataTable tabletbl_accounts;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal tbl_accountsRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tabletbl_accounts = ((tbl_accountsDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int account_id {
                get {
                    return ((int)(this[this.tabletbl_accounts.account_idColumn]));
                }
                set {
                    this[this.tabletbl_accounts.account_idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int bank_id {
                get {
                    return ((int)(this[this.tabletbl_accounts.bank_idColumn]));
                }
                set {
                    this[this.tabletbl_accounts.bank_idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string account_number {
                get {
                    return ((string)(this[this.tabletbl_accounts.account_numberColumn]));
                }
                set {
                    this[this.tabletbl_accounts.account_numberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string account_chapterName {
                get {
                    try {
                        return ((string)(this[this.tabletbl_accounts.account_chapterNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'account_chapterName\' in table \'tbl_accounts\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletbl_accounts.account_chapterNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string account_chapterNo {
                get {
                    try {
                        return ((string)(this[this.tabletbl_accounts.account_chapterNoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'account_chapterNo\' in table \'tbl_accounts\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletbl_accounts.account_chapterNoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int accountType_id {
                get {
                    return ((int)(this[this.tabletbl_accounts.accountType_idColumn]));
                }
                set {
                    this[this.tabletbl_accounts.accountType_idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long account_totalPrice {
                get {
                    return ((long)(this[this.tabletbl_accounts.account_totalPriceColumn]));
                }
                set {
                    this[this.tabletbl_accounts.account_totalPriceColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long account_remain {
                get {
                    return ((long)(this[this.tabletbl_accounts.account_remainColumn]));
                }
                set {
                    this[this.tabletbl_accounts.account_remainColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string moeen_id {
                get {
                    return ((string)(this[this.tabletbl_accounts.moeen_idColumn]));
                }
                set {
                    this[this.tabletbl_accounts.moeen_idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tbl_banksRow tbl_banksRow {
                get {
                    return ((tbl_banksRow)(this.GetParentRow(this.Table.ParentRelations["FK_tbl_accounts_tbl_banks"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_tbl_accounts_tbl_banks"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isaccount_chapterNameNull() {
                return this.IsNull(this.tabletbl_accounts.account_chapterNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setaccount_chapterNameNull() {
                this[this.tabletbl_accounts.account_chapterNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isaccount_chapterNoNull() {
                return this.IsNull(this.tabletbl_accounts.account_chapterNoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setaccount_chapterNoNull() {
                this[this.tabletbl_accounts.account_chapterNoColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class tbl_banksRow : global::System.Data.DataRow {
            
            private tbl_banksDataTable tabletbl_banks;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal tbl_banksRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tabletbl_banks = ((tbl_banksDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int bank_id {
                get {
                    return ((int)(this[this.tabletbl_banks.bank_idColumn]));
                }
                set {
                    this[this.tabletbl_banks.bank_idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string bank_name {
                get {
                    return ((string)(this[this.tabletbl_banks.bank_nameColumn]));
                }
                set {
                    this[this.tabletbl_banks.bank_nameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string bank_comment {
                get {
                    try {
                        return ((string)(this[this.tabletbl_banks.bank_commentColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'bank_comment\' in table \'tbl_banks\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletbl_banks.bank_commentColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isbank_commentNull() {
                return this.IsNull(this.tabletbl_banks.bank_commentColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setbank_commentNull() {
                this[this.tabletbl_banks.bank_commentColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tbl_accountsRow[] Gettbl_accountsRows() {
                if ((this.Table.ChildRelations["FK_tbl_accounts_tbl_banks"] == null)) {
                    return new tbl_accountsRow[0];
                }
                else {
                    return ((tbl_accountsRow[])(base.GetChildRows(this.Table.ChildRelations["FK_tbl_accounts_tbl_banks"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tbl_chequesRow[] Gettbl_chequesRows() {
                if ((this.Table.ChildRelations["FK_tbl_cheques_tbl_banks"] == null)) {
                    return new tbl_chequesRow[0];
                }
                else {
                    return ((tbl_chequesRow[])(base.GetChildRows(this.Table.ChildRelations["FK_tbl_cheques_tbl_banks"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class tbl_chequesRow : global::System.Data.DataRow {
            
            private tbl_chequesDataTable tabletbl_cheques;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal tbl_chequesRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tabletbl_cheques = ((tbl_chequesDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int chq_id {
                get {
                    return ((int)(this[this.tabletbl_cheques.chq_idColumn]));
                }
                set {
                    this[this.tabletbl_cheques.chq_idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int person_id {
                get {
                    return ((int)(this[this.tabletbl_cheques.person_idColumn]));
                }
                set {
                    this[this.tabletbl_cheques.person_idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int bank_id {
                get {
                    return ((int)(this[this.tabletbl_cheques.bank_idColumn]));
                }
                set {
                    this[this.tabletbl_cheques.bank_idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int account_id {
                get {
                    try {
                        return ((int)(this[this.tabletbl_cheques.account_idColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'account_id\' in table \'tbl_cheques\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletbl_cheques.account_idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int chqState_id {
                get {
                    return ((int)(this[this.tabletbl_cheques.chqState_idColumn]));
                }
                set {
                    this[this.tabletbl_cheques.chqState_idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string chq_hisAccount {
                get {
                    try {
                        return ((string)(this[this.tabletbl_cheques.chq_hisAccountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'chq_hisAccount\' in table \'tbl_cheques\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletbl_cheques.chq_hisAccountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string chq_number {
                get {
                    return ((string)(this[this.tabletbl_cheques.chq_numberColumn]));
                }
                set {
                    this[this.tabletbl_cheques.chq_numberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string chq_issDate {
                get {
                    return ((string)(this[this.tabletbl_cheques.chq_issDateColumn]));
                }
                set {
                    this[this.tabletbl_cheques.chq_issDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string chq_usaDate {
                get {
                    return ((string)(this[this.tabletbl_cheques.chq_usaDateColumn]));
                }
                set {
                    this[this.tabletbl_cheques.chq_usaDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool chq_isItMine {
                get {
                    return ((bool)(this[this.tabletbl_cheques.chq_isItMineColumn]));
                }
                set {
                    this[this.tabletbl_cheques.chq_isItMineColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long chq_price {
                get {
                    return ((long)(this[this.tabletbl_cheques.chq_priceColumn]));
                }
                set {
                    this[this.tabletbl_cheques.chq_priceColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string chq_comment {
                get {
                    try {
                        return ((string)(this[this.tabletbl_cheques.chq_commentColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'chq_comment\' in table \'tbl_cheques\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletbl_cheques.chq_commentColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int accDoc_id {
                get {
                    return ((int)(this[this.tabletbl_cheques.accDoc_idColumn]));
                }
                set {
                    this[this.tabletbl_cheques.accDoc_idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tbl_banksRow tbl_banksRow {
                get {
                    return ((tbl_banksRow)(this.GetParentRow(this.Table.ParentRelations["FK_tbl_cheques_tbl_banks"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_tbl_cheques_tbl_banks"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tbl_personsRow tbl_personsRow {
                get {
                    return ((tbl_personsRow)(this.GetParentRow(this.Table.ParentRelations["FK_tbl_cheques_tbl_persons"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_tbl_cheques_tbl_persons"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tbl_chqStatesRow tbl_chqStatesRow {
                get {
                    return ((tbl_chqStatesRow)(this.GetParentRow(this.Table.ParentRelations["FK_tbl_cheques_tbl_chqStates"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_tbl_cheques_tbl_chqStates"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tbl_accDocsRow tbl_accDocsRow {
                get {
                    return ((tbl_accDocsRow)(this.GetParentRow(this.Table.ParentRelations["FK_tbl_cheques_tbl_accDocs"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_tbl_cheques_tbl_accDocs"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isaccount_idNull() {
                return this.IsNull(this.tabletbl_cheques.account_idColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setaccount_idNull() {
                this[this.tabletbl_cheques.account_idColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Ischq_hisAccountNull() {
                return this.IsNull(this.tabletbl_cheques.chq_hisAccountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setchq_hisAccountNull() {
                this[this.tabletbl_cheques.chq_hisAccountColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Ischq_commentNull() {
                return this.IsNull(this.tabletbl_cheques.chq_commentColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setchq_commentNull() {
                this[this.tabletbl_cheques.chq_commentColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class tbl_personsRow : global::System.Data.DataRow {
            
            private tbl_personsDataTable tabletbl_persons;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal tbl_personsRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tabletbl_persons = ((tbl_personsDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int person_id {
                get {
                    return ((int)(this[this.tabletbl_persons.person_idColumn]));
                }
                set {
                    this[this.tabletbl_persons.person_idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int zone_id {
                get {
                    return ((int)(this[this.tabletbl_persons.zone_idColumn]));
                }
                set {
                    this[this.tabletbl_persons.zone_idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string person_familyAndName {
                get {
                    return ((string)(this[this.tabletbl_persons.person_familyAndNameColumn]));
                }
                set {
                    this[this.tabletbl_persons.person_familyAndNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string person_aliasName {
                get {
                    try {
                        return ((string)(this[this.tabletbl_persons.person_aliasNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'person_aliasName\' in table \'tbl_persons\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletbl_persons.person_aliasNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string person_nationalNum {
                get {
                    try {
                        return ((string)(this[this.tabletbl_persons.person_nationalNumColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'person_nationalNum\' in table \'tbl_persons\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletbl_persons.person_nationalNumColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string person_ccode {
                get {
                    try {
                        return ((string)(this[this.tabletbl_persons.person_ccodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'person_ccode\' in table \'tbl_persons\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletbl_persons.person_ccodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string person_phone {
                get {
                    try {
                        return ((string)(this[this.tabletbl_persons.person_phoneColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'person_phone\' in table \'tbl_persons\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletbl_persons.person_phoneColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short person_beforeType {
                get {
                    return ((short)(this[this.tabletbl_persons.person_beforeTypeColumn]));
                }
                set {
                    this[this.tabletbl_persons.person_beforeTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long person_remainMoney {
                get {
                    return ((long)(this[this.tabletbl_persons.person_remainMoneyColumn]));
                }
                set {
                    this[this.tabletbl_persons.person_remainMoneyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool person_isCustomer {
                get {
                    return ((bool)(this[this.tabletbl_persons.person_isCustomerColumn]));
                }
                set {
                    this[this.tabletbl_persons.person_isCustomerColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool person_isSeller {
                get {
                    return ((bool)(this[this.tabletbl_persons.person_isSellerColumn]));
                }
                set {
                    this[this.tabletbl_persons.person_isSellerColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool person_isInter {
                get {
                    return ((bool)(this[this.tabletbl_persons.person_isInterColumn]));
                }
                set {
                    this[this.tabletbl_persons.person_isInterColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short person_discountPercent {
                get {
                    return ((short)(this[this.tabletbl_persons.person_discountPercentColumn]));
                }
                set {
                    this[this.tabletbl_persons.person_discountPercentColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string person_address1 {
                get {
                    try {
                        return ((string)(this[this.tabletbl_persons.person_address1Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'person_address1\' in table \'tbl_persons\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletbl_persons.person_address1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string person_address2 {
                get {
                    try {
                        return ((string)(this[this.tabletbl_persons.person_address2Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'person_address2\' in table \'tbl_persons\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletbl_persons.person_address2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string person_comment {
                get {
                    try {
                        return ((string)(this[this.tabletbl_persons.person_commentColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'person_comment\' in table \'tbl_persons\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletbl_persons.person_commentColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string moeen_id {
                get {
                    return ((string)(this[this.tabletbl_persons.moeen_idColumn]));
                }
                set {
                    this[this.tabletbl_persons.moeen_idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isperson_aliasNameNull() {
                return this.IsNull(this.tabletbl_persons.person_aliasNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setperson_aliasNameNull() {
                this[this.tabletbl_persons.person_aliasNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isperson_nationalNumNull() {
                return this.IsNull(this.tabletbl_persons.person_nationalNumColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setperson_nationalNumNull() {
                this[this.tabletbl_persons.person_nationalNumColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isperson_ccodeNull() {
                return this.IsNull(this.tabletbl_persons.person_ccodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setperson_ccodeNull() {
                this[this.tabletbl_persons.person_ccodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isperson_phoneNull() {
                return this.IsNull(this.tabletbl_persons.person_phoneColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setperson_phoneNull() {
                this[this.tabletbl_persons.person_phoneColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isperson_address1Null() {
                return this.IsNull(this.tabletbl_persons.person_address1Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setperson_address1Null() {
                this[this.tabletbl_persons.person_address1Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isperson_address2Null() {
                return this.IsNull(this.tabletbl_persons.person_address2Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setperson_address2Null() {
                this[this.tabletbl_persons.person_address2Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isperson_commentNull() {
                return this.IsNull(this.tabletbl_persons.person_commentColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setperson_commentNull() {
                this[this.tabletbl_persons.person_commentColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tbl_chequesRow[] Gettbl_chequesRows() {
                if ((this.Table.ChildRelations["FK_tbl_cheques_tbl_persons"] == null)) {
                    return new tbl_chequesRow[0];
                }
                else {
                    return ((tbl_chequesRow[])(base.GetChildRows(this.Table.ChildRelations["FK_tbl_cheques_tbl_persons"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class tbl_chqStatesRow : global::System.Data.DataRow {
            
            private tbl_chqStatesDataTable tabletbl_chqStates;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal tbl_chqStatesRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tabletbl_chqStates = ((tbl_chqStatesDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int chqState_id {
                get {
                    return ((int)(this[this.tabletbl_chqStates.chqState_idColumn]));
                }
                set {
                    this[this.tabletbl_chqStates.chqState_idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string chqState_title {
                get {
                    return ((string)(this[this.tabletbl_chqStates.chqState_titleColumn]));
                }
                set {
                    this[this.tabletbl_chqStates.chqState_titleColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tbl_chequesRow[] Gettbl_chequesRows() {
                if ((this.Table.ChildRelations["FK_tbl_cheques_tbl_chqStates"] == null)) {
                    return new tbl_chequesRow[0];
                }
                else {
                    return ((tbl_chequesRow[])(base.GetChildRows(this.Table.ChildRelations["FK_tbl_cheques_tbl_chqStates"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class tbl_accDocsRow : global::System.Data.DataRow {
            
            private tbl_accDocsDataTable tabletbl_accDocs;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal tbl_accDocsRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tabletbl_accDocs = ((tbl_accDocsDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int accDoc_id {
                get {
                    return ((int)(this[this.tabletbl_accDocs.accDoc_idColumn]));
                }
                set {
                    this[this.tabletbl_accDocs.accDoc_idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long accDoc_price {
                get {
                    return ((long)(this[this.tabletbl_accDocs.accDoc_priceColumn]));
                }
                set {
                    this[this.tabletbl_accDocs.accDoc_priceColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string accDoc_date {
                get {
                    return ((string)(this[this.tabletbl_accDocs.accDoc_dateColumn]));
                }
                set {
                    this[this.tabletbl_accDocs.accDoc_dateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string accDoc_comment {
                get {
                    try {
                        return ((string)(this[this.tabletbl_accDocs.accDoc_commentColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'accDoc_comment\' in table \'tbl_accDocs\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletbl_accDocs.accDoc_commentColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool accDoc_isItPerm {
                get {
                    return ((bool)(this[this.tabletbl_accDocs.accDoc_isItPermColumn]));
                }
                set {
                    this[this.tabletbl_accDocs.accDoc_isItPermColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsaccDoc_commentNull() {
                return this.IsNull(this.tabletbl_accDocs.accDoc_commentColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetaccDoc_commentNull() {
                this[this.tabletbl_accDocs.accDoc_commentColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tbl_chequesRow[] Gettbl_chequesRows() {
                if ((this.Table.ChildRelations["FK_tbl_cheques_tbl_accDocs"] == null)) {
                    return new tbl_chequesRow[0];
                }
                else {
                    return ((tbl_chequesRow[])(base.GetChildRows(this.Table.ChildRelations["FK_tbl_cheques_tbl_accDocs"])));
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class tbl_accountsRowChangeEvent : global::System.EventArgs {
            
            private tbl_accountsRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tbl_accountsRowChangeEvent(tbl_accountsRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tbl_accountsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class tbl_banksRowChangeEvent : global::System.EventArgs {
            
            private tbl_banksRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tbl_banksRowChangeEvent(tbl_banksRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tbl_banksRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class tbl_chequesRowChangeEvent : global::System.EventArgs {
            
            private tbl_chequesRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tbl_chequesRowChangeEvent(tbl_chequesRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tbl_chequesRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class tbl_personsRowChangeEvent : global::System.EventArgs {
            
            private tbl_personsRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tbl_personsRowChangeEvent(tbl_personsRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tbl_personsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class tbl_chqStatesRowChangeEvent : global::System.EventArgs {
            
            private tbl_chqStatesRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tbl_chqStatesRowChangeEvent(tbl_chqStatesRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tbl_chqStatesRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class tbl_accDocsRowChangeEvent : global::System.EventArgs {
            
            private tbl_accDocsRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tbl_accDocsRowChangeEvent(tbl_accDocsRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tbl_accDocsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
namespace Novin.ds_chequesTableAdapters {
    
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class tbl_accountsTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public tbl_accountsTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "tbl_accounts";
            tableMapping.ColumnMappings.Add("account_id", "account_id");
            tableMapping.ColumnMappings.Add("bank_id", "bank_id");
            tableMapping.ColumnMappings.Add("account_number", "account_number");
            tableMapping.ColumnMappings.Add("account_chapterName", "account_chapterName");
            tableMapping.ColumnMappings.Add("account_chapterNo", "account_chapterNo");
            tableMapping.ColumnMappings.Add("accountType_id", "accountType_id");
            tableMapping.ColumnMappings.Add("account_totalPrice", "account_totalPrice");
            tableMapping.ColumnMappings.Add("account_remain", "account_remain");
            tableMapping.ColumnMappings.Add("moeen_id", "moeen_id");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [tbl_accounts] WHERE (([account_id] = @Original_account_id) AND ([bank_id] = @Original_bank_id) AND ([account_number] = @Original_account_number) AND ((@IsNull_account_chapterName = 1 AND [account_chapterName] IS NULL) OR ([account_chapterName] = @Original_account_chapterName)) AND ((@IsNull_account_chapterNo = 1 AND [account_chapterNo] IS NULL) OR ([account_chapterNo] = @Original_account_chapterNo)) AND ([accountType_id] = @Original_accountType_id) AND ([account_totalPrice] = @Original_account_totalPrice) AND ([account_remain] = @Original_account_remain) AND ([moeen_id] = @Original_moeen_id))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_account_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "account_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_bank_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "bank_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_account_number", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "account_number", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_account_chapterName", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "account_chapterName", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_account_chapterName", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "account_chapterName", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_account_chapterNo", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "account_chapterNo", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_account_chapterNo", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "account_chapterNo", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_accountType_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "accountType_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_account_totalPrice", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "account_totalPrice", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_account_remain", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "account_remain", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_moeen_id", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "moeen_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [tbl_accounts] ([bank_id], [account_number], [account_chapterName], [account_chapterNo], [accountType_id], [account_totalPrice], [account_remain], [moeen_id]) VALUES (@bank_id, @account_number, @account_chapterName, @account_chapterNo, @accountType_id, @account_totalPrice, @account_remain, @moeen_id);
SELECT account_id, bank_id, account_number, account_chapterName, account_chapterNo, accountType_id, account_totalPrice, account_remain, moeen_id FROM tbl_accounts WHERE (account_number = @account_number) AND (bank_id = @bank_id)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@bank_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "bank_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@account_number", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "account_number", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@account_chapterName", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "account_chapterName", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@account_chapterNo", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "account_chapterNo", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@accountType_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "accountType_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@account_totalPrice", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "account_totalPrice", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@account_remain", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "account_remain", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@moeen_id", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "moeen_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [tbl_accounts] SET [bank_id] = @bank_id, [account_number] = @account_number, [account_chapterName] = @account_chapterName, [account_chapterNo] = @account_chapterNo, [accountType_id] = @accountType_id, [account_totalPrice] = @account_totalPrice, [account_remain] = @account_remain, [moeen_id] = @moeen_id WHERE (([account_id] = @Original_account_id) AND ([bank_id] = @Original_bank_id) AND ([account_number] = @Original_account_number) AND ((@IsNull_account_chapterName = 1 AND [account_chapterName] IS NULL) OR ([account_chapterName] = @Original_account_chapterName)) AND ((@IsNull_account_chapterNo = 1 AND [account_chapterNo] IS NULL) OR ([account_chapterNo] = @Original_account_chapterNo)) AND ([accountType_id] = @Original_accountType_id) AND ([account_totalPrice] = @Original_account_totalPrice) AND ([account_remain] = @Original_account_remain) AND ([moeen_id] = @Original_moeen_id));
SELECT account_id, bank_id, account_number, account_chapterName, account_chapterNo, accountType_id, account_totalPrice, account_remain, moeen_id FROM tbl_accounts WHERE (account_number = @account_number) AND (bank_id = @bank_id)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@bank_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "bank_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@account_number", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "account_number", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@account_chapterName", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "account_chapterName", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@account_chapterNo", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "account_chapterNo", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@accountType_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "accountType_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@account_totalPrice", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "account_totalPrice", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@account_remain", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "account_remain", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@moeen_id", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "moeen_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_account_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "account_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_bank_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "bank_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_account_number", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "account_number", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_account_chapterName", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "account_chapterName", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_account_chapterName", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "account_chapterName", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_account_chapterNo", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "account_chapterNo", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_account_chapterNo", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "account_chapterNo", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_accountType_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "accountType_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_account_totalPrice", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "account_totalPrice", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_account_remain", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "account_remain", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_moeen_id", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "moeen_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::Novin.Properties.Settings.Default.novinDBConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT account_id, bank_id, account_number, account_chapterName, account_chapterN" +
                "o, accountType_id, account_totalPrice, account_remain, moeen_id FROM tbl_account" +
                "s";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(ds_cheques.tbl_accountsDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual ds_cheques.tbl_accountsDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            ds_cheques.tbl_accountsDataTable dataTable = new ds_cheques.tbl_accountsDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(ds_cheques.tbl_accountsDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(ds_cheques dataSet) {
            return this.Adapter.Update(dataSet, "tbl_accounts");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_account_id, int Original_bank_id, string Original_account_number, string Original_account_chapterName, string Original_account_chapterNo, int Original_accountType_id, long Original_account_totalPrice, long Original_account_remain, string Original_moeen_id) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_account_id));
            this.Adapter.DeleteCommand.Parameters[1].Value = ((int)(Original_bank_id));
            if ((Original_account_number == null)) {
                throw new global::System.ArgumentNullException("Original_account_number");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((string)(Original_account_number));
            }
            if ((Original_account_chapterName == null)) {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[4].Value = ((string)(Original_account_chapterName));
            }
            if ((Original_account_chapterNo == null)) {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[6].Value = ((string)(Original_account_chapterNo));
            }
            this.Adapter.DeleteCommand.Parameters[7].Value = ((int)(Original_accountType_id));
            this.Adapter.DeleteCommand.Parameters[8].Value = ((long)(Original_account_totalPrice));
            this.Adapter.DeleteCommand.Parameters[9].Value = ((long)(Original_account_remain));
            if ((Original_moeen_id == null)) {
                throw new global::System.ArgumentNullException("Original_moeen_id");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[10].Value = ((string)(Original_moeen_id));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(int bank_id, string account_number, string account_chapterName, string account_chapterNo, int accountType_id, long account_totalPrice, long account_remain, string moeen_id) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(bank_id));
            if ((account_number == null)) {
                throw new global::System.ArgumentNullException("account_number");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(account_number));
            }
            if ((account_chapterName == null)) {
                this.Adapter.InsertCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(account_chapterName));
            }
            if ((account_chapterNo == null)) {
                this.Adapter.InsertCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(account_chapterNo));
            }
            this.Adapter.InsertCommand.Parameters[4].Value = ((int)(accountType_id));
            this.Adapter.InsertCommand.Parameters[5].Value = ((long)(account_totalPrice));
            this.Adapter.InsertCommand.Parameters[6].Value = ((long)(account_remain));
            if ((moeen_id == null)) {
                throw new global::System.ArgumentNullException("moeen_id");
            }
            else {
                this.Adapter.InsertCommand.Parameters[7].Value = ((string)(moeen_id));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    int bank_id, 
                    string account_number, 
                    string account_chapterName, 
                    string account_chapterNo, 
                    int accountType_id, 
                    long account_totalPrice, 
                    long account_remain, 
                    string moeen_id, 
                    int Original_account_id, 
                    int Original_bank_id, 
                    string Original_account_number, 
                    string Original_account_chapterName, 
                    string Original_account_chapterNo, 
                    int Original_accountType_id, 
                    long Original_account_totalPrice, 
                    long Original_account_remain, 
                    string Original_moeen_id) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(bank_id));
            if ((account_number == null)) {
                throw new global::System.ArgumentNullException("account_number");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(account_number));
            }
            if ((account_chapterName == null)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(account_chapterName));
            }
            if ((account_chapterNo == null)) {
                this.Adapter.UpdateCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(account_chapterNo));
            }
            this.Adapter.UpdateCommand.Parameters[4].Value = ((int)(accountType_id));
            this.Adapter.UpdateCommand.Parameters[5].Value = ((long)(account_totalPrice));
            this.Adapter.UpdateCommand.Parameters[6].Value = ((long)(account_remain));
            if ((moeen_id == null)) {
                throw new global::System.ArgumentNullException("moeen_id");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((string)(moeen_id));
            }
            this.Adapter.UpdateCommand.Parameters[8].Value = ((int)(Original_account_id));
            this.Adapter.UpdateCommand.Parameters[9].Value = ((int)(Original_bank_id));
            if ((Original_account_number == null)) {
                throw new global::System.ArgumentNullException("Original_account_number");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((string)(Original_account_number));
            }
            if ((Original_account_chapterName == null)) {
                this.Adapter.UpdateCommand.Parameters[11].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[11].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[12].Value = ((string)(Original_account_chapterName));
            }
            if ((Original_account_chapterNo == null)) {
                this.Adapter.UpdateCommand.Parameters[13].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[14].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[13].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[14].Value = ((string)(Original_account_chapterNo));
            }
            this.Adapter.UpdateCommand.Parameters[15].Value = ((int)(Original_accountType_id));
            this.Adapter.UpdateCommand.Parameters[16].Value = ((long)(Original_account_totalPrice));
            this.Adapter.UpdateCommand.Parameters[17].Value = ((long)(Original_account_remain));
            if ((Original_moeen_id == null)) {
                throw new global::System.ArgumentNullException("Original_moeen_id");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[18].Value = ((string)(Original_moeen_id));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string account_chapterName, string account_chapterNo, int accountType_id, long account_totalPrice, long account_remain, string moeen_id, int Original_account_id, int Original_bank_id, string Original_account_number, string Original_account_chapterName, string Original_account_chapterNo, int Original_accountType_id, long Original_account_totalPrice, long Original_account_remain, string Original_moeen_id) {
            return this.Update(Original_bank_id, Original_account_number, account_chapterName, account_chapterNo, accountType_id, account_totalPrice, account_remain, moeen_id, Original_account_id, Original_bank_id, Original_account_number, Original_account_chapterName, Original_account_chapterNo, Original_accountType_id, Original_account_totalPrice, Original_account_remain, Original_moeen_id);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class tbl_banksTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public tbl_banksTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "tbl_banks";
            tableMapping.ColumnMappings.Add("bank_id", "bank_id");
            tableMapping.ColumnMappings.Add("bank_name", "bank_name");
            tableMapping.ColumnMappings.Add("bank_comment", "bank_comment");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[tbl_banks] WHERE (([bank_id] = @Original_bank_id) AND ([bank_n" +
                "ame] = @Original_bank_name) AND ((@IsNull_bank_comment = 1 AND [bank_comment] IS" +
                " NULL) OR ([bank_comment] = @Original_bank_comment)))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_bank_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "bank_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_bank_name", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "bank_name", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_bank_comment", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "bank_comment", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_bank_comment", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "bank_comment", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[tbl_banks] ([bank_name], [bank_comment]) VALUES (@bank_name, @" +
                "bank_comment);\r\nSELECT bank_id, bank_name, bank_comment FROM tbl_banks WHERE (ba" +
                "nk_id = SCOPE_IDENTITY())";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@bank_name", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "bank_name", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@bank_comment", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "bank_comment", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[tbl_banks] SET [bank_name] = @bank_name, [bank_comment] = @bank_comment WHERE (([bank_id] = @Original_bank_id) AND ([bank_name] = @Original_bank_name) AND ((@IsNull_bank_comment = 1 AND [bank_comment] IS NULL) OR ([bank_comment] = @Original_bank_comment)));
SELECT bank_id, bank_name, bank_comment FROM tbl_banks WHERE (bank_id = @bank_id)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@bank_name", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "bank_name", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@bank_comment", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "bank_comment", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_bank_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "bank_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_bank_name", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "bank_name", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_bank_comment", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "bank_comment", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_bank_comment", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "bank_comment", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@bank_id", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "bank_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::Novin.Properties.Settings.Default.novinDBConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT bank_id, bank_name, bank_comment FROM dbo.tbl_banks";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(ds_cheques.tbl_banksDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual ds_cheques.tbl_banksDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            ds_cheques.tbl_banksDataTable dataTable = new ds_cheques.tbl_banksDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(ds_cheques.tbl_banksDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(ds_cheques dataSet) {
            return this.Adapter.Update(dataSet, "tbl_banks");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_bank_id, string Original_bank_name, string Original_bank_comment) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_bank_id));
            if ((Original_bank_name == null)) {
                throw new global::System.ArgumentNullException("Original_bank_name");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Original_bank_name));
            }
            if ((Original_bank_comment == null)) {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[3].Value = ((string)(Original_bank_comment));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string bank_name, string bank_comment) {
            if ((bank_name == null)) {
                throw new global::System.ArgumentNullException("bank_name");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(bank_name));
            }
            if ((bank_comment == null)) {
                this.Adapter.InsertCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(bank_comment));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string bank_name, string bank_comment, int Original_bank_id, string Original_bank_name, string Original_bank_comment, int bank_id) {
            if ((bank_name == null)) {
                throw new global::System.ArgumentNullException("bank_name");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(bank_name));
            }
            if ((bank_comment == null)) {
                this.Adapter.UpdateCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(bank_comment));
            }
            this.Adapter.UpdateCommand.Parameters[2].Value = ((int)(Original_bank_id));
            if ((Original_bank_name == null)) {
                throw new global::System.ArgumentNullException("Original_bank_name");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(Original_bank_name));
            }
            if ((Original_bank_comment == null)) {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(Original_bank_comment));
            }
            this.Adapter.UpdateCommand.Parameters[6].Value = ((int)(bank_id));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string bank_name, string bank_comment, int Original_bank_id, string Original_bank_name, string Original_bank_comment) {
            return this.Update(bank_name, bank_comment, Original_bank_id, Original_bank_name, Original_bank_comment, Original_bank_id);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class tbl_chequesTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public tbl_chequesTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "tbl_cheques";
            tableMapping.ColumnMappings.Add("chq_id", "chq_id");
            tableMapping.ColumnMappings.Add("person_id", "person_id");
            tableMapping.ColumnMappings.Add("bank_id", "bank_id");
            tableMapping.ColumnMappings.Add("account_id", "account_id");
            tableMapping.ColumnMappings.Add("chqState_id", "chqState_id");
            tableMapping.ColumnMappings.Add("chq_hisAccount", "chq_hisAccount");
            tableMapping.ColumnMappings.Add("chq_number", "chq_number");
            tableMapping.ColumnMappings.Add("chq_issDate", "chq_issDate");
            tableMapping.ColumnMappings.Add("chq_usaDate", "chq_usaDate");
            tableMapping.ColumnMappings.Add("chq_isItMine", "chq_isItMine");
            tableMapping.ColumnMappings.Add("chq_price", "chq_price");
            tableMapping.ColumnMappings.Add("chq_comment", "chq_comment");
            tableMapping.ColumnMappings.Add("accDoc_id", "accDoc_id");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [tbl_cheques] WHERE (([chq_id] = @Original_chq_id) AND ([person_id] = @Original_person_id) AND ([bank_id] = @Original_bank_id) AND ((@IsNull_account_id = 1 AND [account_id] IS NULL) OR ([account_id] = @Original_account_id)) AND ([chqState_id] = @Original_chqState_id) AND ((@IsNull_chq_hisAccount = 1 AND [chq_hisAccount] IS NULL) OR ([chq_hisAccount] = @Original_chq_hisAccount)) AND ([chq_number] = @Original_chq_number) AND ([chq_issDate] = @Original_chq_issDate) AND ([chq_usaDate] = @Original_chq_usaDate) AND ([chq_isItMine] = @Original_chq_isItMine) AND ([chq_price] = @Original_chq_price) AND ((@IsNull_chq_comment = 1 AND [chq_comment] IS NULL) OR ([chq_comment] = @Original_chq_comment)) AND ([accDoc_id] = @Original_accDoc_id))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_chq_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "chq_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_person_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "person_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_bank_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "bank_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_account_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "account_id", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_account_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "account_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_chqState_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "chqState_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_chq_hisAccount", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "chq_hisAccount", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_chq_hisAccount", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "chq_hisAccount", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_chq_number", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "chq_number", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_chq_issDate", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "chq_issDate", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_chq_usaDate", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "chq_usaDate", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_chq_isItMine", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "chq_isItMine", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_chq_price", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "chq_price", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_chq_comment", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "chq_comment", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_chq_comment", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "chq_comment", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_accDoc_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "accDoc_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [tbl_cheques] ([person_id], [bank_id], [account_id], [chqState_id], [chq_hisAccount], [chq_number], [chq_issDate], [chq_usaDate], [chq_isItMine], [chq_price], [chq_comment], [accDoc_id]) VALUES (@person_id, @bank_id, @account_id, @chqState_id, @chq_hisAccount, @chq_number, @chq_issDate, @chq_usaDate, @chq_isItMine, @chq_price, @chq_comment, @accDoc_id);
SELECT chq_id, person_id, bank_id, account_id, chqState_id, chq_hisAccount, chq_number, chq_issDate, chq_usaDate, chq_isItMine, chq_price, chq_comment, accDoc_id FROM tbl_cheques WHERE (chq_id = SCOPE_IDENTITY())";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@person_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "person_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@bank_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "bank_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@account_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "account_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@chqState_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "chqState_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@chq_hisAccount", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "chq_hisAccount", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@chq_number", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "chq_number", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@chq_issDate", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "chq_issDate", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@chq_usaDate", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "chq_usaDate", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@chq_isItMine", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "chq_isItMine", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@chq_price", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "chq_price", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@chq_comment", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "chq_comment", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@accDoc_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "accDoc_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [tbl_cheques] SET [person_id] = @person_id, [bank_id] = @bank_id, [account_id] = @account_id, [chqState_id] = @chqState_id, [chq_hisAccount] = @chq_hisAccount, [chq_number] = @chq_number, [chq_issDate] = @chq_issDate, [chq_usaDate] = @chq_usaDate, [chq_isItMine] = @chq_isItMine, [chq_price] = @chq_price, [chq_comment] = @chq_comment, [accDoc_id] = @accDoc_id WHERE (([chq_id] = @Original_chq_id) AND ([person_id] = @Original_person_id) AND ([bank_id] = @Original_bank_id) AND ((@IsNull_account_id = 1 AND [account_id] IS NULL) OR ([account_id] = @Original_account_id)) AND ([chqState_id] = @Original_chqState_id) AND ((@IsNull_chq_hisAccount = 1 AND [chq_hisAccount] IS NULL) OR ([chq_hisAccount] = @Original_chq_hisAccount)) AND ([chq_number] = @Original_chq_number) AND ([chq_issDate] = @Original_chq_issDate) AND ([chq_usaDate] = @Original_chq_usaDate) AND ([chq_isItMine] = @Original_chq_isItMine) AND ([chq_price] = @Original_chq_price) AND ((@IsNull_chq_comment = 1 AND [chq_comment] IS NULL) OR ([chq_comment] = @Original_chq_comment)) AND ([accDoc_id] = @Original_accDoc_id));
SELECT chq_id, person_id, bank_id, account_id, chqState_id, chq_hisAccount, chq_number, chq_issDate, chq_usaDate, chq_isItMine, chq_price, chq_comment, accDoc_id FROM tbl_cheques WHERE (chq_id = @chq_id)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@person_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "person_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@bank_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "bank_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@account_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "account_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@chqState_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "chqState_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@chq_hisAccount", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "chq_hisAccount", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@chq_number", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "chq_number", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@chq_issDate", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "chq_issDate", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@chq_usaDate", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "chq_usaDate", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@chq_isItMine", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "chq_isItMine", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@chq_price", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "chq_price", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@chq_comment", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "chq_comment", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@accDoc_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "accDoc_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_chq_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "chq_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_person_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "person_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_bank_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "bank_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_account_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "account_id", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_account_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "account_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_chqState_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "chqState_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_chq_hisAccount", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "chq_hisAccount", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_chq_hisAccount", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "chq_hisAccount", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_chq_number", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "chq_number", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_chq_issDate", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "chq_issDate", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_chq_usaDate", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "chq_usaDate", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_chq_isItMine", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "chq_isItMine", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_chq_price", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "chq_price", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_chq_comment", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "chq_comment", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_chq_comment", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "chq_comment", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_accDoc_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "accDoc_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@chq_id", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "chq_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::Novin.Properties.Settings.Default.novinDBConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[2];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT chq_id, person_id, bank_id, account_id, chqState_id, chq_hisAccount, chq_n" +
                "umber, chq_issDate, chq_usaDate, chq_isItMine, chq_price, chq_comment, accDoc_id" +
                " FROM tbl_cheques";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[1] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[1].Connection = this.Connection;
            this._commandCollection[1].CommandText = "SELECT        SUM(chq_price) AS sumOfChequesPrice\r\nFROM            tbl_cheques\r\nW" +
                "HERE        (accDoc_id = @accDoc_id)";
            this._commandCollection[1].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@accDoc_id", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "accDoc_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(ds_cheques.tbl_chequesDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual ds_cheques.tbl_chequesDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            ds_cheques.tbl_chequesDataTable dataTable = new ds_cheques.tbl_chequesDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(ds_cheques.tbl_chequesDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(ds_cheques dataSet) {
            return this.Adapter.Update(dataSet, "tbl_cheques");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_chq_id, int Original_person_id, int Original_bank_id, global::System.Nullable<int> Original_account_id, int Original_chqState_id, string Original_chq_hisAccount, string Original_chq_number, string Original_chq_issDate, string Original_chq_usaDate, bool Original_chq_isItMine, long Original_chq_price, string Original_chq_comment, int Original_accDoc_id) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_chq_id));
            this.Adapter.DeleteCommand.Parameters[1].Value = ((int)(Original_person_id));
            this.Adapter.DeleteCommand.Parameters[2].Value = ((int)(Original_bank_id));
            if ((Original_account_id.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[4].Value = ((int)(Original_account_id.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            this.Adapter.DeleteCommand.Parameters[5].Value = ((int)(Original_chqState_id));
            if ((Original_chq_hisAccount == null)) {
                this.Adapter.DeleteCommand.Parameters[6].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[6].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[7].Value = ((string)(Original_chq_hisAccount));
            }
            if ((Original_chq_number == null)) {
                throw new global::System.ArgumentNullException("Original_chq_number");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[8].Value = ((string)(Original_chq_number));
            }
            if ((Original_chq_issDate == null)) {
                throw new global::System.ArgumentNullException("Original_chq_issDate");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[9].Value = ((string)(Original_chq_issDate));
            }
            if ((Original_chq_usaDate == null)) {
                throw new global::System.ArgumentNullException("Original_chq_usaDate");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[10].Value = ((string)(Original_chq_usaDate));
            }
            this.Adapter.DeleteCommand.Parameters[11].Value = ((bool)(Original_chq_isItMine));
            this.Adapter.DeleteCommand.Parameters[12].Value = ((long)(Original_chq_price));
            if ((Original_chq_comment == null)) {
                this.Adapter.DeleteCommand.Parameters[13].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[14].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[13].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[14].Value = ((string)(Original_chq_comment));
            }
            this.Adapter.DeleteCommand.Parameters[15].Value = ((int)(Original_accDoc_id));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(int person_id, int bank_id, global::System.Nullable<int> account_id, int chqState_id, string chq_hisAccount, string chq_number, string chq_issDate, string chq_usaDate, bool chq_isItMine, long chq_price, string chq_comment, int accDoc_id) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(person_id));
            this.Adapter.InsertCommand.Parameters[1].Value = ((int)(bank_id));
            if ((account_id.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[2].Value = ((int)(account_id.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            this.Adapter.InsertCommand.Parameters[3].Value = ((int)(chqState_id));
            if ((chq_hisAccount == null)) {
                this.Adapter.InsertCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = ((string)(chq_hisAccount));
            }
            if ((chq_number == null)) {
                throw new global::System.ArgumentNullException("chq_number");
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = ((string)(chq_number));
            }
            if ((chq_issDate == null)) {
                throw new global::System.ArgumentNullException("chq_issDate");
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = ((string)(chq_issDate));
            }
            if ((chq_usaDate == null)) {
                throw new global::System.ArgumentNullException("chq_usaDate");
            }
            else {
                this.Adapter.InsertCommand.Parameters[7].Value = ((string)(chq_usaDate));
            }
            this.Adapter.InsertCommand.Parameters[8].Value = ((bool)(chq_isItMine));
            this.Adapter.InsertCommand.Parameters[9].Value = ((long)(chq_price));
            if ((chq_comment == null)) {
                this.Adapter.InsertCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[10].Value = ((string)(chq_comment));
            }
            this.Adapter.InsertCommand.Parameters[11].Value = ((int)(accDoc_id));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    int person_id, 
                    int bank_id, 
                    global::System.Nullable<int> account_id, 
                    int chqState_id, 
                    string chq_hisAccount, 
                    string chq_number, 
                    string chq_issDate, 
                    string chq_usaDate, 
                    bool chq_isItMine, 
                    long chq_price, 
                    string chq_comment, 
                    int accDoc_id, 
                    int Original_chq_id, 
                    int Original_person_id, 
                    int Original_bank_id, 
                    global::System.Nullable<int> Original_account_id, 
                    int Original_chqState_id, 
                    string Original_chq_hisAccount, 
                    string Original_chq_number, 
                    string Original_chq_issDate, 
                    string Original_chq_usaDate, 
                    bool Original_chq_isItMine, 
                    long Original_chq_price, 
                    string Original_chq_comment, 
                    int Original_accDoc_id, 
                    int chq_id) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(person_id));
            this.Adapter.UpdateCommand.Parameters[1].Value = ((int)(bank_id));
            if ((account_id.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((int)(account_id.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[3].Value = ((int)(chqState_id));
            if ((chq_hisAccount == null)) {
                this.Adapter.UpdateCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(chq_hisAccount));
            }
            if ((chq_number == null)) {
                throw new global::System.ArgumentNullException("chq_number");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(chq_number));
            }
            if ((chq_issDate == null)) {
                throw new global::System.ArgumentNullException("chq_issDate");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((string)(chq_issDate));
            }
            if ((chq_usaDate == null)) {
                throw new global::System.ArgumentNullException("chq_usaDate");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((string)(chq_usaDate));
            }
            this.Adapter.UpdateCommand.Parameters[8].Value = ((bool)(chq_isItMine));
            this.Adapter.UpdateCommand.Parameters[9].Value = ((long)(chq_price));
            if ((chq_comment == null)) {
                this.Adapter.UpdateCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((string)(chq_comment));
            }
            this.Adapter.UpdateCommand.Parameters[11].Value = ((int)(accDoc_id));
            this.Adapter.UpdateCommand.Parameters[12].Value = ((int)(Original_chq_id));
            this.Adapter.UpdateCommand.Parameters[13].Value = ((int)(Original_person_id));
            this.Adapter.UpdateCommand.Parameters[14].Value = ((int)(Original_bank_id));
            if ((Original_account_id.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[15].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[16].Value = ((int)(Original_account_id.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[15].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[16].Value = global::System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[17].Value = ((int)(Original_chqState_id));
            if ((Original_chq_hisAccount == null)) {
                this.Adapter.UpdateCommand.Parameters[18].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[19].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[18].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[19].Value = ((string)(Original_chq_hisAccount));
            }
            if ((Original_chq_number == null)) {
                throw new global::System.ArgumentNullException("Original_chq_number");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[20].Value = ((string)(Original_chq_number));
            }
            if ((Original_chq_issDate == null)) {
                throw new global::System.ArgumentNullException("Original_chq_issDate");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[21].Value = ((string)(Original_chq_issDate));
            }
            if ((Original_chq_usaDate == null)) {
                throw new global::System.ArgumentNullException("Original_chq_usaDate");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[22].Value = ((string)(Original_chq_usaDate));
            }
            this.Adapter.UpdateCommand.Parameters[23].Value = ((bool)(Original_chq_isItMine));
            this.Adapter.UpdateCommand.Parameters[24].Value = ((long)(Original_chq_price));
            if ((Original_chq_comment == null)) {
                this.Adapter.UpdateCommand.Parameters[25].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[26].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[25].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[26].Value = ((string)(Original_chq_comment));
            }
            this.Adapter.UpdateCommand.Parameters[27].Value = ((int)(Original_accDoc_id));
            this.Adapter.UpdateCommand.Parameters[28].Value = ((int)(chq_id));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    int person_id, 
                    int bank_id, 
                    global::System.Nullable<int> account_id, 
                    int chqState_id, 
                    string chq_hisAccount, 
                    string chq_number, 
                    string chq_issDate, 
                    string chq_usaDate, 
                    bool chq_isItMine, 
                    long chq_price, 
                    string chq_comment, 
                    int accDoc_id, 
                    int Original_chq_id, 
                    int Original_person_id, 
                    int Original_bank_id, 
                    global::System.Nullable<int> Original_account_id, 
                    int Original_chqState_id, 
                    string Original_chq_hisAccount, 
                    string Original_chq_number, 
                    string Original_chq_issDate, 
                    string Original_chq_usaDate, 
                    bool Original_chq_isItMine, 
                    long Original_chq_price, 
                    string Original_chq_comment, 
                    int Original_accDoc_id) {
            return this.Update(person_id, bank_id, account_id, chqState_id, chq_hisAccount, chq_number, chq_issDate, chq_usaDate, chq_isItMine, chq_price, chq_comment, accDoc_id, Original_chq_id, Original_person_id, Original_bank_id, Original_account_id, Original_chqState_id, Original_chq_hisAccount, Original_chq_number, Original_chq_issDate, Original_chq_usaDate, Original_chq_isItMine, Original_chq_price, Original_chq_comment, Original_accDoc_id, Original_chq_id);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual global::System.Nullable<long> getSumOfChequesPrice(int accDoc_id) {
            global::System.Data.SqlClient.SqlCommand command = this.CommandCollection[1];
            command.Parameters[0].Value = ((int)(accDoc_id));
            global::System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            object returnValue;
            try {
                returnValue = command.ExecuteScalar();
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            if (((returnValue == null) 
                        || (returnValue.GetType() == typeof(global::System.DBNull)))) {
                return new global::System.Nullable<long>();
            }
            else {
                return new global::System.Nullable<long>(((long)(returnValue)));
            }
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class tbl_personsTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public tbl_personsTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "tbl_persons";
            tableMapping.ColumnMappings.Add("person_id", "person_id");
            tableMapping.ColumnMappings.Add("zone_id", "zone_id");
            tableMapping.ColumnMappings.Add("person_familyAndName", "person_familyAndName");
            tableMapping.ColumnMappings.Add("person_aliasName", "person_aliasName");
            tableMapping.ColumnMappings.Add("person_nationalNum", "person_nationalNum");
            tableMapping.ColumnMappings.Add("person_ccode", "person_ccode");
            tableMapping.ColumnMappings.Add("person_phone", "person_phone");
            tableMapping.ColumnMappings.Add("person_beforeType", "person_beforeType");
            tableMapping.ColumnMappings.Add("person_remainMoney", "person_remainMoney");
            tableMapping.ColumnMappings.Add("person_isCustomer", "person_isCustomer");
            tableMapping.ColumnMappings.Add("person_isSeller", "person_isSeller");
            tableMapping.ColumnMappings.Add("person_isInter", "person_isInter");
            tableMapping.ColumnMappings.Add("person_discountPercent", "person_discountPercent");
            tableMapping.ColumnMappings.Add("person_address1", "person_address1");
            tableMapping.ColumnMappings.Add("person_address2", "person_address2");
            tableMapping.ColumnMappings.Add("person_comment", "person_comment");
            tableMapping.ColumnMappings.Add("moeen_id", "moeen_id");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [tbl_persons] WHERE (([person_id] = @Original_person_id) AND ([zone_id] = @Original_zone_id) AND ([person_familyAndName] = @Original_person_familyAndName) AND ((@IsNull_person_aliasName = 1 AND [person_aliasName] IS NULL) OR ([person_aliasName] = @Original_person_aliasName)) AND ((@IsNull_person_nationalNum = 1 AND [person_nationalNum] IS NULL) OR ([person_nationalNum] = @Original_person_nationalNum)) AND ((@IsNull_person_ccode = 1 AND [person_ccode] IS NULL) OR ([person_ccode] = @Original_person_ccode)) AND ((@IsNull_person_phone = 1 AND [person_phone] IS NULL) OR ([person_phone] = @Original_person_phone)) AND ([person_beforeType] = @Original_person_beforeType) AND ([person_remainMoney] = @Original_person_remainMoney) AND ([person_isCustomer] = @Original_person_isCustomer) AND ([person_isSeller] = @Original_person_isSeller) AND ([person_isInter] = @Original_person_isInter) AND ([person_discountPercent] = @Original_person_discountPercent) AND ((@IsNull_person_address1 = 1 AND [person_address1] IS NULL) OR ([person_address1] = @Original_person_address1)) AND ((@IsNull_person_address2 = 1 AND [person_address2] IS NULL) OR ([person_address2] = @Original_person_address2)) AND ((@IsNull_person_comment = 1 AND [person_comment] IS NULL) OR ([person_comment] = @Original_person_comment)) AND ([moeen_id] = @Original_moeen_id))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_person_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "person_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_zone_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "zone_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_person_familyAndName", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "person_familyAndName", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_person_aliasName", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "person_aliasName", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_person_aliasName", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "person_aliasName", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_person_nationalNum", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "person_nationalNum", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_person_nationalNum", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "person_nationalNum", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_person_ccode", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "person_ccode", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_person_ccode", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "person_ccode", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_person_phone", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "person_phone", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_person_phone", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "person_phone", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_person_beforeType", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "person_beforeType", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_person_remainMoney", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "person_remainMoney", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_person_isCustomer", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "person_isCustomer", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_person_isSeller", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "person_isSeller", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_person_isInter", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "person_isInter", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_person_discountPercent", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "person_discountPercent", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_person_address1", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "person_address1", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_person_address1", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "person_address1", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_person_address2", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "person_address2", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_person_address2", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "person_address2", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_person_comment", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "person_comment", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_person_comment", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "person_comment", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_moeen_id", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "moeen_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [tbl_persons] ([person_id], [zone_id], [person_familyAndName], [person_aliasName], [person_nationalNum], [person_ccode], [person_phone], [person_beforeType], [person_remainMoney], [person_isCustomer], [person_isSeller], [person_isInter], [person_discountPercent], [person_address1], [person_address2], [person_comment], [moeen_id]) VALUES (@person_id, @zone_id, @person_familyAndName, @person_aliasName, @person_nationalNum, @person_ccode, @person_phone, @person_beforeType, @person_remainMoney, @person_isCustomer, @person_isSeller, @person_isInter, @person_discountPercent, @person_address1, @person_address2, @person_comment, @moeen_id);
SELECT person_id, zone_id, person_familyAndName, person_aliasName, person_nationalNum, person_ccode, person_phone, person_beforeType, person_remainMoney, person_isCustomer, person_isSeller, person_isInter, person_discountPercent, person_address1, person_address2, person_comment, moeen_id FROM tbl_persons WHERE (person_id = @person_id)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@person_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "person_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@zone_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "zone_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@person_familyAndName", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "person_familyAndName", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@person_aliasName", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "person_aliasName", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@person_nationalNum", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "person_nationalNum", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@person_ccode", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "person_ccode", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@person_phone", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "person_phone", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@person_beforeType", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "person_beforeType", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@person_remainMoney", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "person_remainMoney", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@person_isCustomer", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "person_isCustomer", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@person_isSeller", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "person_isSeller", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@person_isInter", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "person_isInter", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@person_discountPercent", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "person_discountPercent", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@person_address1", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "person_address1", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@person_address2", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "person_address2", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@person_comment", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "person_comment", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@moeen_id", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "moeen_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = "UPDATE [tbl_persons] SET [person_id] = @person_id, [zone_id] = @zone_id, [person_" +
                "familyAndName] = @person_familyAndName, [person_aliasName] = @person_aliasName, " +
                "[person_nationalNum] = @person_nationalNum, [person_ccode] = @person_ccode, [per" +
                "son_phone] = @person_phone, [person_beforeType] = @person_beforeType, [person_re" +
                "mainMoney] = @person_remainMoney, [person_isCustomer] = @person_isCustomer, [per" +
                "son_isSeller] = @person_isSeller, [person_isInter] = @person_isInter, [person_di" +
                "scountPercent] = @person_discountPercent, [person_address1] = @person_address1, " +
                "[person_address2] = @person_address2, [person_comment] = @person_comment, [moeen" +
                "_id] = @moeen_id WHERE (([person_id] = @Original_person_id) AND ([zone_id] = @Or" +
                "iginal_zone_id) AND ([person_familyAndName] = @Original_person_familyAndName) AN" +
                "D ((@IsNull_person_aliasName = 1 AND [person_aliasName] IS NULL) OR ([person_ali" +
                "asName] = @Original_person_aliasName)) AND ((@IsNull_person_nationalNum = 1 AND " +
                "[person_nationalNum] IS NULL) OR ([person_nationalNum] = @Original_person_nation" +
                "alNum)) AND ((@IsNull_person_ccode = 1 AND [person_ccode] IS NULL) OR ([person_c" +
                "code] = @Original_person_ccode)) AND ((@IsNull_person_phone = 1 AND [person_phon" +
                "e] IS NULL) OR ([person_phone] = @Original_person_phone)) AND ([person_beforeTyp" +
                "e] = @Original_person_beforeType) AND ([person_remainMoney] = @Original_person_r" +
                "emainMoney) AND ([person_isCustomer] = @Original_person_isCustomer) AND ([person" +
                "_isSeller] = @Original_person_isSeller) AND ([person_isInter] = @Original_person" +
                "_isInter) AND ([person_discountPercent] = @Original_person_discountPercent) AND " +
                "((@IsNull_person_address1 = 1 AND [person_address1] IS NULL) OR ([person_address" +
                "1] = @Original_person_address1)) AND ((@IsNull_person_address2 = 1 AND [person_a" +
                "ddress2] IS NULL) OR ([person_address2] = @Original_person_address2)) AND ((@IsN" +
                "ull_person_comment = 1 AND [person_comment] IS NULL) OR ([person_comment] = @Ori" +
                "ginal_person_comment)) AND ([moeen_id] = @Original_moeen_id));\r\nSELECT person_id" +
                ", zone_id, person_familyAndName, person_aliasName, person_nationalNum, person_cc" +
                "ode, person_phone, person_beforeType, person_remainMoney, person_isCustomer, per" +
                "son_isSeller, person_isInter, person_discountPercent, person_address1, person_ad" +
                "dress2, person_comment, moeen_id FROM tbl_persons WHERE (person_id = @person_id)" +
                "";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@person_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "person_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@zone_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "zone_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@person_familyAndName", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "person_familyAndName", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@person_aliasName", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "person_aliasName", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@person_nationalNum", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "person_nationalNum", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@person_ccode", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "person_ccode", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@person_phone", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "person_phone", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@person_beforeType", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "person_beforeType", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@person_remainMoney", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "person_remainMoney", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@person_isCustomer", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "person_isCustomer", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@person_isSeller", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "person_isSeller", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@person_isInter", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "person_isInter", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@person_discountPercent", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "person_discountPercent", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@person_address1", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "person_address1", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@person_address2", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "person_address2", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@person_comment", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "person_comment", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@moeen_id", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "moeen_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_person_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "person_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_zone_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "zone_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_person_familyAndName", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "person_familyAndName", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_person_aliasName", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "person_aliasName", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_person_aliasName", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "person_aliasName", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_person_nationalNum", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "person_nationalNum", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_person_nationalNum", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "person_nationalNum", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_person_ccode", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "person_ccode", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_person_ccode", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "person_ccode", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_person_phone", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "person_phone", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_person_phone", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "person_phone", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_person_beforeType", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "person_beforeType", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_person_remainMoney", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "person_remainMoney", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_person_isCustomer", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "person_isCustomer", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_person_isSeller", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "person_isSeller", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_person_isInter", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "person_isInter", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_person_discountPercent", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "person_discountPercent", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_person_address1", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "person_address1", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_person_address1", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "person_address1", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_person_address2", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "person_address2", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_person_address2", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "person_address2", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_person_comment", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "person_comment", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_person_comment", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "person_comment", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_moeen_id", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "moeen_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::Novin.Properties.Settings.Default.novinDBConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = @"SELECT person_id, zone_id, person_familyAndName, person_aliasName, person_nationalNum, person_ccode, person_phone, person_beforeType, person_remainMoney, person_isCustomer, person_isSeller, person_isInter, person_discountPercent, person_address1, person_address2, person_comment, moeen_id FROM tbl_persons";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(ds_cheques.tbl_personsDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual ds_cheques.tbl_personsDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            ds_cheques.tbl_personsDataTable dataTable = new ds_cheques.tbl_personsDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(ds_cheques.tbl_personsDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(ds_cheques dataSet) {
            return this.Adapter.Update(dataSet, "tbl_persons");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(
                    int Original_person_id, 
                    int Original_zone_id, 
                    string Original_person_familyAndName, 
                    string Original_person_aliasName, 
                    string Original_person_nationalNum, 
                    string Original_person_ccode, 
                    string Original_person_phone, 
                    short Original_person_beforeType, 
                    long Original_person_remainMoney, 
                    bool Original_person_isCustomer, 
                    bool Original_person_isSeller, 
                    bool Original_person_isInter, 
                    short Original_person_discountPercent, 
                    string Original_person_address1, 
                    string Original_person_address2, 
                    string Original_person_comment, 
                    string Original_moeen_id) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_person_id));
            this.Adapter.DeleteCommand.Parameters[1].Value = ((int)(Original_zone_id));
            if ((Original_person_familyAndName == null)) {
                throw new global::System.ArgumentNullException("Original_person_familyAndName");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((string)(Original_person_familyAndName));
            }
            if ((Original_person_aliasName == null)) {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[4].Value = ((string)(Original_person_aliasName));
            }
            if ((Original_person_nationalNum == null)) {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[6].Value = ((string)(Original_person_nationalNum));
            }
            if ((Original_person_ccode == null)) {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[8].Value = ((string)(Original_person_ccode));
            }
            if ((Original_person_phone == null)) {
                this.Adapter.DeleteCommand.Parameters[9].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[9].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[10].Value = ((string)(Original_person_phone));
            }
            this.Adapter.DeleteCommand.Parameters[11].Value = ((short)(Original_person_beforeType));
            this.Adapter.DeleteCommand.Parameters[12].Value = ((long)(Original_person_remainMoney));
            this.Adapter.DeleteCommand.Parameters[13].Value = ((bool)(Original_person_isCustomer));
            this.Adapter.DeleteCommand.Parameters[14].Value = ((bool)(Original_person_isSeller));
            this.Adapter.DeleteCommand.Parameters[15].Value = ((bool)(Original_person_isInter));
            this.Adapter.DeleteCommand.Parameters[16].Value = ((short)(Original_person_discountPercent));
            if ((Original_person_address1 == null)) {
                this.Adapter.DeleteCommand.Parameters[17].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[18].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[17].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[18].Value = ((string)(Original_person_address1));
            }
            if ((Original_person_address2 == null)) {
                this.Adapter.DeleteCommand.Parameters[19].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[20].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[19].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[20].Value = ((string)(Original_person_address2));
            }
            if ((Original_person_comment == null)) {
                this.Adapter.DeleteCommand.Parameters[21].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[22].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[21].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[22].Value = ((string)(Original_person_comment));
            }
            if ((Original_moeen_id == null)) {
                throw new global::System.ArgumentNullException("Original_moeen_id");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[23].Value = ((string)(Original_moeen_id));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(
                    int person_id, 
                    int zone_id, 
                    string person_familyAndName, 
                    string person_aliasName, 
                    string person_nationalNum, 
                    string person_ccode, 
                    string person_phone, 
                    short person_beforeType, 
                    long person_remainMoney, 
                    bool person_isCustomer, 
                    bool person_isSeller, 
                    bool person_isInter, 
                    short person_discountPercent, 
                    string person_address1, 
                    string person_address2, 
                    string person_comment, 
                    string moeen_id) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(person_id));
            this.Adapter.InsertCommand.Parameters[1].Value = ((int)(zone_id));
            if ((person_familyAndName == null)) {
                throw new global::System.ArgumentNullException("person_familyAndName");
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(person_familyAndName));
            }
            if ((person_aliasName == null)) {
                this.Adapter.InsertCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(person_aliasName));
            }
            if ((person_nationalNum == null)) {
                this.Adapter.InsertCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = ((string)(person_nationalNum));
            }
            if ((person_ccode == null)) {
                this.Adapter.InsertCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = ((string)(person_ccode));
            }
            if ((person_phone == null)) {
                this.Adapter.InsertCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = ((string)(person_phone));
            }
            this.Adapter.InsertCommand.Parameters[7].Value = ((short)(person_beforeType));
            this.Adapter.InsertCommand.Parameters[8].Value = ((long)(person_remainMoney));
            this.Adapter.InsertCommand.Parameters[9].Value = ((bool)(person_isCustomer));
            this.Adapter.InsertCommand.Parameters[10].Value = ((bool)(person_isSeller));
            this.Adapter.InsertCommand.Parameters[11].Value = ((bool)(person_isInter));
            this.Adapter.InsertCommand.Parameters[12].Value = ((short)(person_discountPercent));
            if ((person_address1 == null)) {
                this.Adapter.InsertCommand.Parameters[13].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[13].Value = ((string)(person_address1));
            }
            if ((person_address2 == null)) {
                this.Adapter.InsertCommand.Parameters[14].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[14].Value = ((string)(person_address2));
            }
            if ((person_comment == null)) {
                this.Adapter.InsertCommand.Parameters[15].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[15].Value = ((string)(person_comment));
            }
            if ((moeen_id == null)) {
                throw new global::System.ArgumentNullException("moeen_id");
            }
            else {
                this.Adapter.InsertCommand.Parameters[16].Value = ((string)(moeen_id));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    int person_id, 
                    int zone_id, 
                    string person_familyAndName, 
                    string person_aliasName, 
                    string person_nationalNum, 
                    string person_ccode, 
                    string person_phone, 
                    short person_beforeType, 
                    long person_remainMoney, 
                    bool person_isCustomer, 
                    bool person_isSeller, 
                    bool person_isInter, 
                    short person_discountPercent, 
                    string person_address1, 
                    string person_address2, 
                    string person_comment, 
                    string moeen_id, 
                    int Original_person_id, 
                    int Original_zone_id, 
                    string Original_person_familyAndName, 
                    string Original_person_aliasName, 
                    string Original_person_nationalNum, 
                    string Original_person_ccode, 
                    string Original_person_phone, 
                    short Original_person_beforeType, 
                    long Original_person_remainMoney, 
                    bool Original_person_isCustomer, 
                    bool Original_person_isSeller, 
                    bool Original_person_isInter, 
                    short Original_person_discountPercent, 
                    string Original_person_address1, 
                    string Original_person_address2, 
                    string Original_person_comment, 
                    string Original_moeen_id) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(person_id));
            this.Adapter.UpdateCommand.Parameters[1].Value = ((int)(zone_id));
            if ((person_familyAndName == null)) {
                throw new global::System.ArgumentNullException("person_familyAndName");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(person_familyAndName));
            }
            if ((person_aliasName == null)) {
                this.Adapter.UpdateCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(person_aliasName));
            }
            if ((person_nationalNum == null)) {
                this.Adapter.UpdateCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(person_nationalNum));
            }
            if ((person_ccode == null)) {
                this.Adapter.UpdateCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(person_ccode));
            }
            if ((person_phone == null)) {
                this.Adapter.UpdateCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((string)(person_phone));
            }
            this.Adapter.UpdateCommand.Parameters[7].Value = ((short)(person_beforeType));
            this.Adapter.UpdateCommand.Parameters[8].Value = ((long)(person_remainMoney));
            this.Adapter.UpdateCommand.Parameters[9].Value = ((bool)(person_isCustomer));
            this.Adapter.UpdateCommand.Parameters[10].Value = ((bool)(person_isSeller));
            this.Adapter.UpdateCommand.Parameters[11].Value = ((bool)(person_isInter));
            this.Adapter.UpdateCommand.Parameters[12].Value = ((short)(person_discountPercent));
            if ((person_address1 == null)) {
                this.Adapter.UpdateCommand.Parameters[13].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[13].Value = ((string)(person_address1));
            }
            if ((person_address2 == null)) {
                this.Adapter.UpdateCommand.Parameters[14].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[14].Value = ((string)(person_address2));
            }
            if ((person_comment == null)) {
                this.Adapter.UpdateCommand.Parameters[15].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[15].Value = ((string)(person_comment));
            }
            if ((moeen_id == null)) {
                throw new global::System.ArgumentNullException("moeen_id");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[16].Value = ((string)(moeen_id));
            }
            this.Adapter.UpdateCommand.Parameters[17].Value = ((int)(Original_person_id));
            this.Adapter.UpdateCommand.Parameters[18].Value = ((int)(Original_zone_id));
            if ((Original_person_familyAndName == null)) {
                throw new global::System.ArgumentNullException("Original_person_familyAndName");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[19].Value = ((string)(Original_person_familyAndName));
            }
            if ((Original_person_aliasName == null)) {
                this.Adapter.UpdateCommand.Parameters[20].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[21].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[20].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[21].Value = ((string)(Original_person_aliasName));
            }
            if ((Original_person_nationalNum == null)) {
                this.Adapter.UpdateCommand.Parameters[22].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[23].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[22].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[23].Value = ((string)(Original_person_nationalNum));
            }
            if ((Original_person_ccode == null)) {
                this.Adapter.UpdateCommand.Parameters[24].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[25].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[24].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[25].Value = ((string)(Original_person_ccode));
            }
            if ((Original_person_phone == null)) {
                this.Adapter.UpdateCommand.Parameters[26].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[27].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[26].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[27].Value = ((string)(Original_person_phone));
            }
            this.Adapter.UpdateCommand.Parameters[28].Value = ((short)(Original_person_beforeType));
            this.Adapter.UpdateCommand.Parameters[29].Value = ((long)(Original_person_remainMoney));
            this.Adapter.UpdateCommand.Parameters[30].Value = ((bool)(Original_person_isCustomer));
            this.Adapter.UpdateCommand.Parameters[31].Value = ((bool)(Original_person_isSeller));
            this.Adapter.UpdateCommand.Parameters[32].Value = ((bool)(Original_person_isInter));
            this.Adapter.UpdateCommand.Parameters[33].Value = ((short)(Original_person_discountPercent));
            if ((Original_person_address1 == null)) {
                this.Adapter.UpdateCommand.Parameters[34].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[35].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[34].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[35].Value = ((string)(Original_person_address1));
            }
            if ((Original_person_address2 == null)) {
                this.Adapter.UpdateCommand.Parameters[36].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[37].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[36].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[37].Value = ((string)(Original_person_address2));
            }
            if ((Original_person_comment == null)) {
                this.Adapter.UpdateCommand.Parameters[38].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[39].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[38].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[39].Value = ((string)(Original_person_comment));
            }
            if ((Original_moeen_id == null)) {
                throw new global::System.ArgumentNullException("Original_moeen_id");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[40].Value = ((string)(Original_moeen_id));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    int zone_id, 
                    string person_familyAndName, 
                    string person_aliasName, 
                    string person_nationalNum, 
                    string person_ccode, 
                    string person_phone, 
                    short person_beforeType, 
                    long person_remainMoney, 
                    bool person_isCustomer, 
                    bool person_isSeller, 
                    bool person_isInter, 
                    short person_discountPercent, 
                    string person_address1, 
                    string person_address2, 
                    string person_comment, 
                    string moeen_id, 
                    int Original_person_id, 
                    int Original_zone_id, 
                    string Original_person_familyAndName, 
                    string Original_person_aliasName, 
                    string Original_person_nationalNum, 
                    string Original_person_ccode, 
                    string Original_person_phone, 
                    short Original_person_beforeType, 
                    long Original_person_remainMoney, 
                    bool Original_person_isCustomer, 
                    bool Original_person_isSeller, 
                    bool Original_person_isInter, 
                    short Original_person_discountPercent, 
                    string Original_person_address1, 
                    string Original_person_address2, 
                    string Original_person_comment, 
                    string Original_moeen_id) {
            return this.Update(Original_person_id, zone_id, person_familyAndName, person_aliasName, person_nationalNum, person_ccode, person_phone, person_beforeType, person_remainMoney, person_isCustomer, person_isSeller, person_isInter, person_discountPercent, person_address1, person_address2, person_comment, moeen_id, Original_person_id, Original_zone_id, Original_person_familyAndName, Original_person_aliasName, Original_person_nationalNum, Original_person_ccode, Original_person_phone, Original_person_beforeType, Original_person_remainMoney, Original_person_isCustomer, Original_person_isSeller, Original_person_isInter, Original_person_discountPercent, Original_person_address1, Original_person_address2, Original_person_comment, Original_moeen_id);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class tbl_chqStatesTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public tbl_chqStatesTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "tbl_chqStates";
            tableMapping.ColumnMappings.Add("chqState_id", "chqState_id");
            tableMapping.ColumnMappings.Add("chqState_title", "chqState_title");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[tbl_chqStates] WHERE (([chqState_id] = @Original_chqState_id) " +
                "AND ([chqState_title] = @Original_chqState_title))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_chqState_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "chqState_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_chqState_title", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "chqState_title", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[tbl_chqStates] ([chqState_title]) VALUES (@chqState_title);\r\nS" +
                "ELECT chqState_id, chqState_title FROM tbl_chqStates WHERE (chqState_id = SCOPE_" +
                "IDENTITY())";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@chqState_title", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "chqState_title", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[tbl_chqStates] SET [chqState_title] = @chqState_title WHERE (([chqState_id] = @Original_chqState_id) AND ([chqState_title] = @Original_chqState_title));
SELECT chqState_id, chqState_title FROM tbl_chqStates WHERE (chqState_id = @chqState_id)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@chqState_title", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "chqState_title", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_chqState_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "chqState_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_chqState_title", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "chqState_title", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@chqState_id", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "chqState_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::Novin.Properties.Settings.Default.novinDBConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT chqState_id, chqState_title FROM dbo.tbl_chqStates";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(ds_cheques.tbl_chqStatesDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual ds_cheques.tbl_chqStatesDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            ds_cheques.tbl_chqStatesDataTable dataTable = new ds_cheques.tbl_chqStatesDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(ds_cheques.tbl_chqStatesDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(ds_cheques dataSet) {
            return this.Adapter.Update(dataSet, "tbl_chqStates");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_chqState_id, string Original_chqState_title) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_chqState_id));
            if ((Original_chqState_title == null)) {
                throw new global::System.ArgumentNullException("Original_chqState_title");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Original_chqState_title));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string chqState_title) {
            if ((chqState_title == null)) {
                throw new global::System.ArgumentNullException("chqState_title");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(chqState_title));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string chqState_title, int Original_chqState_id, string Original_chqState_title, int chqState_id) {
            if ((chqState_title == null)) {
                throw new global::System.ArgumentNullException("chqState_title");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(chqState_title));
            }
            this.Adapter.UpdateCommand.Parameters[1].Value = ((int)(Original_chqState_id));
            if ((Original_chqState_title == null)) {
                throw new global::System.ArgumentNullException("Original_chqState_title");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(Original_chqState_title));
            }
            this.Adapter.UpdateCommand.Parameters[3].Value = ((int)(chqState_id));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string chqState_title, int Original_chqState_id, string Original_chqState_title) {
            return this.Update(chqState_title, Original_chqState_id, Original_chqState_title, Original_chqState_id);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class tbl_accDocsTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public tbl_accDocsTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "tbl_accDocs";
            tableMapping.ColumnMappings.Add("accDoc_id", "accDoc_id");
            tableMapping.ColumnMappings.Add("accDoc_price", "accDoc_price");
            tableMapping.ColumnMappings.Add("accDoc_date", "accDoc_date");
            tableMapping.ColumnMappings.Add("accDoc_comment", "accDoc_comment");
            tableMapping.ColumnMappings.Add("accDoc_isItPerm", "accDoc_isItPerm");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [dbo].[tbl_accDocs] WHERE (([accDoc_id] = @Original_accDoc_id) AND ([accDoc_price] = @Original_accDoc_price) AND ([accDoc_date] = @Original_accDoc_date) AND ((@IsNull_accDoc_comment = 1 AND [accDoc_comment] IS NULL) OR ([accDoc_comment] = @Original_accDoc_comment)) AND ([accDoc_isItPerm] = @Original_accDoc_isItPerm))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_accDoc_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "accDoc_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_accDoc_price", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "accDoc_price", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_accDoc_date", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "accDoc_date", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_accDoc_comment", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "accDoc_comment", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_accDoc_comment", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "accDoc_comment", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_accDoc_isItPerm", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "accDoc_isItPerm", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[tbl_accDocs] ([accDoc_id], [accDoc_price], [accDoc_date], [accDoc_comment], [accDoc_isItPerm]) VALUES (@accDoc_id, @accDoc_price, @accDoc_date, @accDoc_comment, @accDoc_isItPerm);
SELECT accDoc_id, accDoc_price, accDoc_date, accDoc_comment, accDoc_isItPerm FROM tbl_accDocs WHERE (accDoc_id = @accDoc_id)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@accDoc_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "accDoc_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@accDoc_price", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "accDoc_price", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@accDoc_date", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "accDoc_date", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@accDoc_comment", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "accDoc_comment", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@accDoc_isItPerm", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "accDoc_isItPerm", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[tbl_accDocs] SET [accDoc_id] = @accDoc_id, [accDoc_price] = @accDoc_price, [accDoc_date] = @accDoc_date, [accDoc_comment] = @accDoc_comment, [accDoc_isItPerm] = @accDoc_isItPerm WHERE (([accDoc_id] = @Original_accDoc_id) AND ([accDoc_price] = @Original_accDoc_price) AND ([accDoc_date] = @Original_accDoc_date) AND ((@IsNull_accDoc_comment = 1 AND [accDoc_comment] IS NULL) OR ([accDoc_comment] = @Original_accDoc_comment)) AND ([accDoc_isItPerm] = @Original_accDoc_isItPerm));
SELECT accDoc_id, accDoc_price, accDoc_date, accDoc_comment, accDoc_isItPerm FROM tbl_accDocs WHERE (accDoc_id = @accDoc_id)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@accDoc_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "accDoc_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@accDoc_price", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "accDoc_price", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@accDoc_date", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "accDoc_date", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@accDoc_comment", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "accDoc_comment", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@accDoc_isItPerm", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "accDoc_isItPerm", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_accDoc_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "accDoc_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_accDoc_price", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "accDoc_price", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_accDoc_date", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "accDoc_date", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_accDoc_comment", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "accDoc_comment", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_accDoc_comment", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "accDoc_comment", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_accDoc_isItPerm", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "accDoc_isItPerm", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::Novin.Properties.Settings.Default.novinDBConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT accDoc_id, accDoc_price, accDoc_date, accDoc_comment, accDoc_isItPerm FROM" +
                " dbo.tbl_accDocs";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(ds_cheques.tbl_accDocsDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual ds_cheques.tbl_accDocsDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            ds_cheques.tbl_accDocsDataTable dataTable = new ds_cheques.tbl_accDocsDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(ds_cheques.tbl_accDocsDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(ds_cheques dataSet) {
            return this.Adapter.Update(dataSet, "tbl_accDocs");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_accDoc_id, long Original_accDoc_price, string Original_accDoc_date, string Original_accDoc_comment, bool Original_accDoc_isItPerm) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_accDoc_id));
            this.Adapter.DeleteCommand.Parameters[1].Value = ((long)(Original_accDoc_price));
            if ((Original_accDoc_date == null)) {
                throw new global::System.ArgumentNullException("Original_accDoc_date");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((string)(Original_accDoc_date));
            }
            if ((Original_accDoc_comment == null)) {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[4].Value = ((string)(Original_accDoc_comment));
            }
            this.Adapter.DeleteCommand.Parameters[5].Value = ((bool)(Original_accDoc_isItPerm));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(int accDoc_id, long accDoc_price, string accDoc_date, string accDoc_comment, bool accDoc_isItPerm) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(accDoc_id));
            this.Adapter.InsertCommand.Parameters[1].Value = ((long)(accDoc_price));
            if ((accDoc_date == null)) {
                throw new global::System.ArgumentNullException("accDoc_date");
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(accDoc_date));
            }
            if ((accDoc_comment == null)) {
                this.Adapter.InsertCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(accDoc_comment));
            }
            this.Adapter.InsertCommand.Parameters[4].Value = ((bool)(accDoc_isItPerm));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(int accDoc_id, long accDoc_price, string accDoc_date, string accDoc_comment, bool accDoc_isItPerm, int Original_accDoc_id, long Original_accDoc_price, string Original_accDoc_date, string Original_accDoc_comment, bool Original_accDoc_isItPerm) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(accDoc_id));
            this.Adapter.UpdateCommand.Parameters[1].Value = ((long)(accDoc_price));
            if ((accDoc_date == null)) {
                throw new global::System.ArgumentNullException("accDoc_date");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(accDoc_date));
            }
            if ((accDoc_comment == null)) {
                this.Adapter.UpdateCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(accDoc_comment));
            }
            this.Adapter.UpdateCommand.Parameters[4].Value = ((bool)(accDoc_isItPerm));
            this.Adapter.UpdateCommand.Parameters[5].Value = ((int)(Original_accDoc_id));
            this.Adapter.UpdateCommand.Parameters[6].Value = ((long)(Original_accDoc_price));
            if ((Original_accDoc_date == null)) {
                throw new global::System.ArgumentNullException("Original_accDoc_date");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((string)(Original_accDoc_date));
            }
            if ((Original_accDoc_comment == null)) {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[9].Value = ((string)(Original_accDoc_comment));
            }
            this.Adapter.UpdateCommand.Parameters[10].Value = ((bool)(Original_accDoc_isItPerm));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(long accDoc_price, string accDoc_date, string accDoc_comment, bool accDoc_isItPerm, int Original_accDoc_id, long Original_accDoc_price, string Original_accDoc_date, string Original_accDoc_comment, bool Original_accDoc_isItPerm) {
            return this.Update(Original_accDoc_id, accDoc_price, accDoc_date, accDoc_comment, accDoc_isItPerm, Original_accDoc_id, Original_accDoc_price, Original_accDoc_date, Original_accDoc_comment, Original_accDoc_isItPerm);
        }
    }
    
    /// <summary>
    ///TableAdapterManager is used to coordinate TableAdapters in the dataset to enable Hierarchical Update scenarios
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerDesigner, Microsoft.VSD" +
        "esigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapterManager")]
    public partial class TableAdapterManager : global::System.ComponentModel.Component {
        
        private UpdateOrderOption _updateOrder;
        
        private tbl_accountsTableAdapter _tbl_accountsTableAdapter;
        
        private tbl_banksTableAdapter _tbl_banksTableAdapter;
        
        private tbl_chequesTableAdapter _tbl_chequesTableAdapter;
        
        private tbl_personsTableAdapter _tbl_personsTableAdapter;
        
        private tbl_chqStatesTableAdapter _tbl_chqStatesTableAdapter;
        
        private tbl_accDocsTableAdapter _tbl_accDocsTableAdapter;
        
        private bool _backupDataSetBeforeUpdate;
        
        private global::System.Data.IDbConnection _connection;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public UpdateOrderOption UpdateOrder {
            get {
                return this._updateOrder;
            }
            set {
                this._updateOrder = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public tbl_accountsTableAdapter tbl_accountsTableAdapter {
            get {
                return this._tbl_accountsTableAdapter;
            }
            set {
                this._tbl_accountsTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public tbl_banksTableAdapter tbl_banksTableAdapter {
            get {
                return this._tbl_banksTableAdapter;
            }
            set {
                this._tbl_banksTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public tbl_chequesTableAdapter tbl_chequesTableAdapter {
            get {
                return this._tbl_chequesTableAdapter;
            }
            set {
                this._tbl_chequesTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public tbl_personsTableAdapter tbl_personsTableAdapter {
            get {
                return this._tbl_personsTableAdapter;
            }
            set {
                this._tbl_personsTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public tbl_chqStatesTableAdapter tbl_chqStatesTableAdapter {
            get {
                return this._tbl_chqStatesTableAdapter;
            }
            set {
                this._tbl_chqStatesTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public tbl_accDocsTableAdapter tbl_accDocsTableAdapter {
            get {
                return this._tbl_accDocsTableAdapter;
            }
            set {
                this._tbl_accDocsTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool BackupDataSetBeforeUpdate {
            get {
                return this._backupDataSetBeforeUpdate;
            }
            set {
                this._backupDataSetBeforeUpdate = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        public global::System.Data.IDbConnection Connection {
            get {
                if ((this._connection != null)) {
                    return this._connection;
                }
                if (((this._tbl_accountsTableAdapter != null) 
                            && (this._tbl_accountsTableAdapter.Connection != null))) {
                    return this._tbl_accountsTableAdapter.Connection;
                }
                if (((this._tbl_banksTableAdapter != null) 
                            && (this._tbl_banksTableAdapter.Connection != null))) {
                    return this._tbl_banksTableAdapter.Connection;
                }
                if (((this._tbl_chequesTableAdapter != null) 
                            && (this._tbl_chequesTableAdapter.Connection != null))) {
                    return this._tbl_chequesTableAdapter.Connection;
                }
                if (((this._tbl_personsTableAdapter != null) 
                            && (this._tbl_personsTableAdapter.Connection != null))) {
                    return this._tbl_personsTableAdapter.Connection;
                }
                if (((this._tbl_chqStatesTableAdapter != null) 
                            && (this._tbl_chqStatesTableAdapter.Connection != null))) {
                    return this._tbl_chqStatesTableAdapter.Connection;
                }
                if (((this._tbl_accDocsTableAdapter != null) 
                            && (this._tbl_accDocsTableAdapter.Connection != null))) {
                    return this._tbl_accDocsTableAdapter.Connection;
                }
                return null;
            }
            set {
                this._connection = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        public int TableAdapterInstanceCount {
            get {
                int count = 0;
                if ((this._tbl_accountsTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._tbl_banksTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._tbl_chequesTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._tbl_personsTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._tbl_chqStatesTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._tbl_accDocsTableAdapter != null)) {
                    count = (count + 1);
                }
                return count;
            }
        }
        
        /// <summary>
        ///Update rows in top-down order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private int UpdateUpdatedRows(ds_cheques dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            int result = 0;
            if ((this._tbl_chqStatesTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.tbl_chqStates.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._tbl_chqStatesTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._tbl_personsTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.tbl_persons.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._tbl_personsTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._tbl_accDocsTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.tbl_accDocs.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._tbl_accDocsTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._tbl_banksTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.tbl_banks.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._tbl_banksTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._tbl_accountsTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.tbl_accounts.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._tbl_accountsTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._tbl_chequesTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.tbl_cheques.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._tbl_chequesTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            return result;
        }
        
        /// <summary>
        ///Insert rows in top-down order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private int UpdateInsertedRows(ds_cheques dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            int result = 0;
            if ((this._tbl_chqStatesTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.tbl_chqStates.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._tbl_chqStatesTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._tbl_personsTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.tbl_persons.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._tbl_personsTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._tbl_accDocsTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.tbl_accDocs.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._tbl_accDocsTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._tbl_banksTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.tbl_banks.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._tbl_banksTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._tbl_accountsTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.tbl_accounts.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._tbl_accountsTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._tbl_chequesTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.tbl_cheques.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._tbl_chequesTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            return result;
        }
        
        /// <summary>
        ///Delete rows in bottom-up order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private int UpdateDeletedRows(ds_cheques dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows) {
            int result = 0;
            if ((this._tbl_chequesTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.tbl_cheques.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._tbl_chequesTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._tbl_accountsTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.tbl_accounts.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._tbl_accountsTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._tbl_banksTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.tbl_banks.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._tbl_banksTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._tbl_accDocsTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.tbl_accDocs.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._tbl_accDocsTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._tbl_personsTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.tbl_persons.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._tbl_personsTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._tbl_chqStatesTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.tbl_chqStates.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._tbl_chqStatesTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            return result;
        }
        
        /// <summary>
        ///Remove inserted rows that become updated rows after calling TableAdapter.Update(inserted rows) first
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Data.DataRow[] GetRealUpdatedRows(global::System.Data.DataRow[] updatedRows, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            if (((updatedRows == null) 
                        || (updatedRows.Length < 1))) {
                return updatedRows;
            }
            if (((allAddedRows == null) 
                        || (allAddedRows.Count < 1))) {
                return updatedRows;
            }
            global::System.Collections.Generic.List<global::System.Data.DataRow> realUpdatedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            for (int i = 0; (i < updatedRows.Length); i = (i + 1)) {
                global::System.Data.DataRow row = updatedRows[i];
                if ((allAddedRows.Contains(row) == false)) {
                    realUpdatedRows.Add(row);
                }
            }
            return realUpdatedRows.ToArray();
        }
        
        /// <summary>
        ///Update all changes to the dataset.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public virtual int UpdateAll(ds_cheques dataSet) {
            if ((dataSet == null)) {
                throw new global::System.ArgumentNullException("dataSet");
            }
            if ((dataSet.HasChanges() == false)) {
                return 0;
            }
            if (((this._tbl_accountsTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._tbl_accountsTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._tbl_banksTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._tbl_banksTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._tbl_chequesTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._tbl_chequesTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._tbl_personsTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._tbl_personsTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._tbl_chqStatesTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._tbl_chqStatesTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._tbl_accDocsTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._tbl_accDocsTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            global::System.Data.IDbConnection workConnection = this.Connection;
            if ((workConnection == null)) {
                throw new global::System.ApplicationException("TableAdapterManager contains no connection information. Set each TableAdapterMana" +
                        "ger TableAdapter property to a valid TableAdapter instance.");
            }
            bool workConnOpened = false;
            if (((workConnection.State & global::System.Data.ConnectionState.Broken) 
                        == global::System.Data.ConnectionState.Broken)) {
                workConnection.Close();
            }
            if ((workConnection.State == global::System.Data.ConnectionState.Closed)) {
                workConnection.Open();
                workConnOpened = true;
            }
            global::System.Data.IDbTransaction workTransaction = workConnection.BeginTransaction();
            if ((workTransaction == null)) {
                throw new global::System.ApplicationException("The transaction cannot begin. The current data connection does not support transa" +
                        "ctions or the current state is not allowing the transaction to begin.");
            }
            global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            global::System.Collections.Generic.List<global::System.Data.Common.DataAdapter> adaptersWithAcceptChangesDuringUpdate = new global::System.Collections.Generic.List<global::System.Data.Common.DataAdapter>();
            global::System.Collections.Generic.Dictionary<object, global::System.Data.IDbConnection> revertConnections = new global::System.Collections.Generic.Dictionary<object, global::System.Data.IDbConnection>();
            int result = 0;
            global::System.Data.DataSet backupDataSet = null;
            if (this.BackupDataSetBeforeUpdate) {
                backupDataSet = new global::System.Data.DataSet();
                backupDataSet.Merge(dataSet);
            }
            try {
                // ---- Prepare for update -----------
                //
                if ((this._tbl_accountsTableAdapter != null)) {
                    revertConnections.Add(this._tbl_accountsTableAdapter, this._tbl_accountsTableAdapter.Connection);
                    this._tbl_accountsTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._tbl_accountsTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._tbl_accountsTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._tbl_accountsTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._tbl_accountsTableAdapter.Adapter);
                    }
                }
                if ((this._tbl_banksTableAdapter != null)) {
                    revertConnections.Add(this._tbl_banksTableAdapter, this._tbl_banksTableAdapter.Connection);
                    this._tbl_banksTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._tbl_banksTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._tbl_banksTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._tbl_banksTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._tbl_banksTableAdapter.Adapter);
                    }
                }
                if ((this._tbl_chequesTableAdapter != null)) {
                    revertConnections.Add(this._tbl_chequesTableAdapter, this._tbl_chequesTableAdapter.Connection);
                    this._tbl_chequesTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._tbl_chequesTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._tbl_chequesTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._tbl_chequesTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._tbl_chequesTableAdapter.Adapter);
                    }
                }
                if ((this._tbl_personsTableAdapter != null)) {
                    revertConnections.Add(this._tbl_personsTableAdapter, this._tbl_personsTableAdapter.Connection);
                    this._tbl_personsTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._tbl_personsTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._tbl_personsTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._tbl_personsTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._tbl_personsTableAdapter.Adapter);
                    }
                }
                if ((this._tbl_chqStatesTableAdapter != null)) {
                    revertConnections.Add(this._tbl_chqStatesTableAdapter, this._tbl_chqStatesTableAdapter.Connection);
                    this._tbl_chqStatesTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._tbl_chqStatesTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._tbl_chqStatesTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._tbl_chqStatesTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._tbl_chqStatesTableAdapter.Adapter);
                    }
                }
                if ((this._tbl_accDocsTableAdapter != null)) {
                    revertConnections.Add(this._tbl_accDocsTableAdapter, this._tbl_accDocsTableAdapter.Connection);
                    this._tbl_accDocsTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._tbl_accDocsTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._tbl_accDocsTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._tbl_accDocsTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._tbl_accDocsTableAdapter.Adapter);
                    }
                }
                // 
                //---- Perform updates -----------
                //
                if ((this.UpdateOrder == UpdateOrderOption.UpdateInsertDelete)) {
                    result = (result + this.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows));
                    result = (result + this.UpdateInsertedRows(dataSet, allAddedRows));
                }
                else {
                    result = (result + this.UpdateInsertedRows(dataSet, allAddedRows));
                    result = (result + this.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows));
                }
                result = (result + this.UpdateDeletedRows(dataSet, allChangedRows));
                // 
                //---- Commit updates -----------
                //
                workTransaction.Commit();
                if ((0 < allAddedRows.Count)) {
                    global::System.Data.DataRow[] rows = new System.Data.DataRow[allAddedRows.Count];
                    allAddedRows.CopyTo(rows);
                    for (int i = 0; (i < rows.Length); i = (i + 1)) {
                        global::System.Data.DataRow row = rows[i];
                        row.AcceptChanges();
                    }
                }
                if ((0 < allChangedRows.Count)) {
                    global::System.Data.DataRow[] rows = new System.Data.DataRow[allChangedRows.Count];
                    allChangedRows.CopyTo(rows);
                    for (int i = 0; (i < rows.Length); i = (i + 1)) {
                        global::System.Data.DataRow row = rows[i];
                        row.AcceptChanges();
                    }
                }
            }
            catch (global::System.Exception ex) {
                workTransaction.Rollback();
                // ---- Restore the dataset -----------
                if (this.BackupDataSetBeforeUpdate) {
                    global::System.Diagnostics.Debug.Assert((backupDataSet != null));
                    dataSet.Clear();
                    dataSet.Merge(backupDataSet);
                }
                else {
                    if ((0 < allAddedRows.Count)) {
                        global::System.Data.DataRow[] rows = new System.Data.DataRow[allAddedRows.Count];
                        allAddedRows.CopyTo(rows);
                        for (int i = 0; (i < rows.Length); i = (i + 1)) {
                            global::System.Data.DataRow row = rows[i];
                            row.AcceptChanges();
                            row.SetAdded();
                        }
                    }
                }
                throw ex;
            }
            finally {
                if (workConnOpened) {
                    workConnection.Close();
                }
                if ((this._tbl_accountsTableAdapter != null)) {
                    this._tbl_accountsTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._tbl_accountsTableAdapter]));
                    this._tbl_accountsTableAdapter.Transaction = null;
                }
                if ((this._tbl_banksTableAdapter != null)) {
                    this._tbl_banksTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._tbl_banksTableAdapter]));
                    this._tbl_banksTableAdapter.Transaction = null;
                }
                if ((this._tbl_chequesTableAdapter != null)) {
                    this._tbl_chequesTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._tbl_chequesTableAdapter]));
                    this._tbl_chequesTableAdapter.Transaction = null;
                }
                if ((this._tbl_personsTableAdapter != null)) {
                    this._tbl_personsTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._tbl_personsTableAdapter]));
                    this._tbl_personsTableAdapter.Transaction = null;
                }
                if ((this._tbl_chqStatesTableAdapter != null)) {
                    this._tbl_chqStatesTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._tbl_chqStatesTableAdapter]));
                    this._tbl_chqStatesTableAdapter.Transaction = null;
                }
                if ((this._tbl_accDocsTableAdapter != null)) {
                    this._tbl_accDocsTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._tbl_accDocsTableAdapter]));
                    this._tbl_accDocsTableAdapter.Transaction = null;
                }
                if ((0 < adaptersWithAcceptChangesDuringUpdate.Count)) {
                    global::System.Data.Common.DataAdapter[] adapters = new System.Data.Common.DataAdapter[adaptersWithAcceptChangesDuringUpdate.Count];
                    adaptersWithAcceptChangesDuringUpdate.CopyTo(adapters);
                    for (int i = 0; (i < adapters.Length); i = (i + 1)) {
                        global::System.Data.Common.DataAdapter adapter = adapters[i];
                        adapter.AcceptChangesDuringUpdate = true;
                    }
                }
            }
            return result;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected virtual void SortSelfReferenceRows(global::System.Data.DataRow[] rows, global::System.Data.DataRelation relation, bool childFirst) {
            global::System.Array.Sort<global::System.Data.DataRow>(rows, new SelfReferenceComparer(relation, childFirst));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected virtual bool MatchTableAdapterConnection(global::System.Data.IDbConnection inputConnection) {
            if ((this._connection != null)) {
                return true;
            }
            if (((this.Connection == null) 
                        || (inputConnection == null))) {
                return true;
            }
            if (string.Equals(this.Connection.ConnectionString, inputConnection.ConnectionString, global::System.StringComparison.Ordinal)) {
                return true;
            }
            return false;
        }
        
        /// <summary>
        ///Update Order Option
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public enum UpdateOrderOption {
            
            InsertUpdateDelete = 0,
            
            UpdateInsertDelete = 1,
        }
        
        /// <summary>
        ///Used to sort self-referenced table's rows
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        private class SelfReferenceComparer : object, global::System.Collections.Generic.IComparer<global::System.Data.DataRow> {
            
            private global::System.Data.DataRelation _relation;
            
            private int _childFirst;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SelfReferenceComparer(global::System.Data.DataRelation relation, bool childFirst) {
                this._relation = relation;
                if (childFirst) {
                    this._childFirst = -1;
                }
                else {
                    this._childFirst = 1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool IsChildAndParent(global::System.Data.DataRow child, global::System.Data.DataRow parent) {
                global::System.Diagnostics.Debug.Assert((child != null));
                global::System.Diagnostics.Debug.Assert((parent != null));
                global::System.Data.DataRow newParent = child.GetParentRow(this._relation, global::System.Data.DataRowVersion.Default);
                for (
                ; ((newParent != null) 
                            && ((object.ReferenceEquals(newParent, child) == false) 
                            && (object.ReferenceEquals(newParent, parent) == false))); 
                ) {
                    newParent = newParent.GetParentRow(this._relation, global::System.Data.DataRowVersion.Default);
                }
                if ((newParent == null)) {
                    for (newParent = child.GetParentRow(this._relation, global::System.Data.DataRowVersion.Original); ((newParent != null) 
                                && ((object.ReferenceEquals(newParent, child) == false) 
                                && (object.ReferenceEquals(newParent, parent) == false))); 
                    ) {
                        newParent = newParent.GetParentRow(this._relation, global::System.Data.DataRowVersion.Original);
                    }
                }
                if (object.ReferenceEquals(newParent, parent)) {
                    return true;
                }
                return false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Compare(global::System.Data.DataRow row1, global::System.Data.DataRow row2) {
                if (object.ReferenceEquals(row1, row2)) {
                    return 0;
                }
                if ((row1 == null)) {
                    return -1;
                }
                if ((row2 == null)) {
                    return 1;
                }

                // Is row1 the child or grandchild of row2
                if (this.IsChildAndParent(row1, row2)) {
                    return this._childFirst;
                }

                // Is row2 the child or grandchild of row1
                if (this.IsChildAndParent(row2, row1)) {
                    return (-1 * this._childFirst);
                }
                return 0;
            }
        }
    }
}

#pragma warning restore 1591